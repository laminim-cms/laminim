<?php  namespace LaminimCMS\Generated; use Lkt\QueryBuilding\SelectBuilder; class ModularBlockSelectBuilder extends SelectBuilder { const COMPONENT = 'lmm-modular-block'; const columnId = 'id'; public function andId(?string $as = null): static { return $this->andDatum('id', $as); } public static function id(?string $as = null): static { return static::datum('id', $as); } public function andCountId(?string $as = null): static { return $this->andCountDatum('id', $as); } public static function countId(?string $as = null): static { return static::countDatum('id', $as); } const columnCreatedAt = 'created_at'; public function andCreatedAt(?string $as = null): static { return $this->andDatum('created_at', $as); } public static function createdAt(?string $as = null): static { return static::datum('created_at', $as); } public function andCountCreatedAt(?string $as = null): static { return $this->andCountDatum('created_at', $as); } public static function countCreatedAt(?string $as = null): static { return static::countDatum('created_at', $as); } public function andYearCreatedAt(?string $as = null): static { return $this->andYearDatum('created_at', $as); } public static function yearCreatedAt(?string $as = null): static { return static::yearDatum('created_at', $as); } public function andMonthCreatedAt(?string $as = null): static { return $this->andMonthDatum('created_at', $as); } public static function monthCreatedAt(?string $as = null): static { return static::monthDatum('created_at', $as); } const columnCreatedBy = 'created_by'; public function andCreatedBy(?string $as = null): static { return $this->andDatum('created_by', $as); } public static function createdBy(?string $as = null): static { return static::datum('created_by', $as); } public function andCountCreatedBy(?string $as = null): static { return $this->andCountDatum('created_by', $as); } public static function countCreatedBy(?string $as = null): static { return static::countDatum('created_by', $as); } const columnComponent = 'component'; public function andComponent(?string $as = null): static { return $this->andDatum('component', $as); } public static function component(?string $as = null): static { return static::datum('component', $as); } public function andCountComponent(?string $as = null): static { return $this->andCountDatum('component', $as); } public static function countComponent(?string $as = null): static { return static::countDatum('component', $as); } const columnContent = 'content'; public function andContent(?string $as = null): static { return $this->andDatum('content', $as); } public static function content(?string $as = null): static { return static::datum('content', $as); } public function andCountContent(?string $as = null): static { return $this->andCountDatum('content', $as); } public static function countContent(?string $as = null): static { return static::countDatum('content', $as); } const columnTitle = 'title'; public function andTitle(?string $as = null): static { return $this->andDatum('title', $as); } public static function title(?string $as = null): static { return static::datum('title', $as); } public function andCountTitle(?string $as = null): static { return $this->andCountDatum('title', $as); } public static function countTitle(?string $as = null): static { return static::countDatum('title', $as); } const columnType = 'type'; public function andType(?string $as = null): static { return $this->andDatum('type', $as); } public static function type(?string $as = null): static { return static::datum('type', $as); } public function andCountType(?string $as = null): static { return $this->andCountDatum('type', $as); } public static function countType(?string $as = null): static { return static::countDatum('type', $as); } const columnElementId = 'element_id'; public function andElementId(?string $as = null): static { return $this->andDatum('element_id', $as); } public static function elementId(?string $as = null): static { return static::datum('element_id', $as); } public function andCountElementId(?string $as = null): static { return $this->andCountDatum('element_id', $as); } public static function countElementId(?string $as = null): static { return static::countDatum('element_id', $as); } const columnItemType = 'item_type'; public function andItemType(?string $as = null): static { return $this->andDatum('item_type', $as); } public static function itemType(?string $as = null): static { return static::datum('item_type', $as); } public function andCountItemType(?string $as = null): static { return $this->andCountDatum('item_type', $as); } public static function countItemType(?string $as = null): static { return static::countDatum('item_type', $as); } const columnItem = 'item_id'; public function andItem(?string $as = null): static { return $this->andDatum('item_id', $as); } public static function item(?string $as = null): static { return static::datum('item_id', $as); } public function andCountItem(?string $as = null): static { return $this->andCountDatum('item_id', $as); } public static function countItem(?string $as = null): static { return static::countDatum('item_id', $as); } const columnItems = 'items_ids'; public function andItems(?string $as = null): static { return $this->andDatum('items_ids', $as); } public static function items(?string $as = null): static { return static::datum('items_ids', $as); } public function andCountItems(?string $as = null): static { return $this->andCountDatum('items_ids', $as); } public static function countItems(?string $as = null): static { return static::countDatum('items_ids', $as); } const columnClassName = 'class_name'; public function andClassName(?string $as = null): static { return $this->andDatum('class_name', $as); } public static function className(?string $as = null): static { return static::datum('class_name', $as); } public function andCountClassName(?string $as = null): static { return $this->andCountDatum('class_name', $as); } public static function countClassName(?string $as = null): static { return static::countDatum('class_name', $as); } const columnColumns = 'columns'; public function andColumns(?string $as = null): static { return $this->andDatum('columns', $as); } public static function columns(?string $as = null): static { return static::datum('columns', $as); } public function andCountColumns(?string $as = null): static { return $this->andCountDatum('columns', $as); } public static function countColumns(?string $as = null): static { return static::countDatum('columns', $as); } const columnBlocks = 'blocks'; public function andBlocks(?string $as = null): static { return $this->andDatum('blocks', $as); } public static function blocks(?string $as = null): static { return static::datum('blocks', $as); } public function andCountBlocks(?string $as = null): static { return $this->andCountDatum('blocks', $as); } public static function countBlocks(?string $as = null): static { return static::countDatum('blocks', $as); } }