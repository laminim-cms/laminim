<?php  namespace LaminimCMS\Generated; use Lkt\QueryBuilding\SelectBuilder; class VisibilitySelectBuilder extends SelectBuilder { const COMPONENT = 'lmm-visibility'; const columnId = 'id'; public function andId(?string $as = null): static { return $this->andDatum('id', $as); } public static function id(?string $as = null): static { return static::datum('id', $as); } public function andCountId(?string $as = null): static { return $this->andCountDatum('id', $as); } public static function countId(?string $as = null): static { return static::countDatum('id', $as); } const columnCreatedAt = 'created_at'; public function andCreatedAt(?string $as = null): static { return $this->andDatum('created_at', $as); } public static function createdAt(?string $as = null): static { return static::datum('created_at', $as); } public function andCountCreatedAt(?string $as = null): static { return $this->andCountDatum('created_at', $as); } public static function countCreatedAt(?string $as = null): static { return static::countDatum('created_at', $as); } public function andYearCreatedAt(?string $as = null): static { return $this->andYearDatum('created_at', $as); } public static function yearCreatedAt(?string $as = null): static { return static::yearDatum('created_at', $as); } public function andMonthCreatedAt(?string $as = null): static { return $this->andMonthDatum('created_at', $as); } public static function monthCreatedAt(?string $as = null): static { return static::monthDatum('created_at', $as); } const columnCreatedBy = 'created_by'; public function andCreatedBy(?string $as = null): static { return $this->andDatum('created_by', $as); } public static function createdBy(?string $as = null): static { return static::datum('created_by', $as); } public function andCountCreatedBy(?string $as = null): static { return $this->andCountDatum('created_by', $as); } public static function countCreatedBy(?string $as = null): static { return static::countDatum('created_by', $as); } const columnAutoPublishAt = 'auto_publish_at'; public function andAutoPublishAt(?string $as = null): static { return $this->andDatum('auto_publish_at', $as); } public static function autoPublishAt(?string $as = null): static { return static::datum('auto_publish_at', $as); } public function andCountAutoPublishAt(?string $as = null): static { return $this->andCountDatum('auto_publish_at', $as); } public static function countAutoPublishAt(?string $as = null): static { return static::countDatum('auto_publish_at', $as); } public function andYearAutoPublishAt(?string $as = null): static { return $this->andYearDatum('auto_publish_at', $as); } public static function yearAutoPublishAt(?string $as = null): static { return static::yearDatum('auto_publish_at', $as); } public function andMonthAutoPublishAt(?string $as = null): static { return $this->andMonthDatum('auto_publish_at', $as); } public static function monthAutoPublishAt(?string $as = null): static { return static::monthDatum('auto_publish_at', $as); } const columnItemType = 'item_type'; public function andItemType(?string $as = null): static { return $this->andDatum('item_type', $as); } public static function itemType(?string $as = null): static { return static::datum('item_type', $as); } public function andCountItemType(?string $as = null): static { return $this->andCountDatum('item_type', $as); } public static function countItemType(?string $as = null): static { return static::countDatum('item_type', $as); } const columnItem = 'item_id'; public function andItem(?string $as = null): static { return $this->andDatum('item_id', $as); } public static function item(?string $as = null): static { return static::datum('item_id', $as); } public function andCountItem(?string $as = null): static { return $this->andCountDatum('item_id', $as); } public static function countItem(?string $as = null): static { return static::countDatum('item_id', $as); } const columnStatus = 'status'; public function andStatus(?string $as = null): static { return $this->andDatum('status', $as); } public static function status(?string $as = null): static { return static::datum('status', $as); } public function andCountStatus(?string $as = null): static { return $this->andCountDatum('status', $as); } public static function countStatus(?string $as = null): static { return static::countDatum('status', $as); } }