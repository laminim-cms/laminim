<?php  namespace LaminimCMS\Generated; use Lkt\QueryBuilding\SelectBuilder; class TranslationSelectBuilder extends SelectBuilder { const COMPONENT = 'lmm-i18n'; const columnId = 'id'; public function andId(?string $as = null): static { return $this->andDatum('id', $as); } public static function id(?string $as = null): static { return static::datum('id', $as); } public function andCountId(?string $as = null): static { return $this->andCountDatum('id', $as); } public static function countId(?string $as = null): static { return static::countDatum('id', $as); } const columnStack = 'lmm_stack_id'; public function andStack(?string $as = null): static { return $this->andDatum('lmm_stack_id', $as); } public static function stack(?string $as = null): static { return static::datum('lmm_stack_id', $as); } public function andCountStack(?string $as = null): static { return $this->andCountDatum('lmm_stack_id', $as); } public static function countStack(?string $as = null): static { return static::countDatum('lmm_stack_id', $as); } const columnType = 'type'; public function andType(?string $as = null): static { return $this->andDatum('type', $as); } public static function type(?string $as = null): static { return static::datum('type', $as); } public function andCountType(?string $as = null): static { return $this->andCountDatum('type', $as); } public static function countType(?string $as = null): static { return static::countDatum('type', $as); } const columnProperty = 'property'; public function andProperty(?string $as = null): static { return $this->andDatum('property', $as); } public static function property(?string $as = null): static { return static::datum('property', $as); } public function andCountProperty(?string $as = null): static { return $this->andCountDatum('property', $as); } public static function countProperty(?string $as = null): static { return static::countDatum('property', $as); } const columnValue = 'value'; public function andValue(?string $as = null): static { return $this->andDatum('value', $as); } public static function value(?string $as = null): static { return static::datum('value', $as); } public function andCountValue(?string $as = null): static { return $this->andCountDatum('value', $as); } public static function countValue(?string $as = null): static { return static::countDatum('value', $as); } const columnValueEn = 'value'; public function andValueEn(?string $as = null): static { return $this->andDatum('value', $as); } public static function valueEn(?string $as = null): static { return static::datum('value', $as); } public function andCountValueEn(?string $as = null): static { return $this->andCountDatum('value', $as); } public static function countValueEn(?string $as = null): static { return static::countDatum('value', $as); } const columnValueEs = 'value'; public function andValueEs(?string $as = null): static { return $this->andDatum('value', $as); } public static function valueEs(?string $as = null): static { return static::datum('value', $as); } public function andCountValueEs(?string $as = null): static { return $this->andCountDatum('value', $as); } public static function countValueEs(?string $as = null): static { return static::countDatum('value', $as); } const columnCreatedAt = 'created_at'; public function andCreatedAt(?string $as = null): static { return $this->andDatum('created_at', $as); } public static function createdAt(?string $as = null): static { return static::datum('created_at', $as); } public function andCountCreatedAt(?string $as = null): static { return $this->andCountDatum('created_at', $as); } public static function countCreatedAt(?string $as = null): static { return static::countDatum('created_at', $as); } public function andYearCreatedAt(?string $as = null): static { return $this->andYearDatum('created_at', $as); } public static function yearCreatedAt(?string $as = null): static { return static::yearDatum('created_at', $as); } public function andMonthCreatedAt(?string $as = null): static { return $this->andMonthDatum('created_at', $as); } public static function monthCreatedAt(?string $as = null): static { return static::monthDatum('created_at', $as); } }