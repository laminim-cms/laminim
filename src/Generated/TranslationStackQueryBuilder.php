<?php  namespace LaminimCMS\Generated; use Lkt\QueryBuilding\Query; use Lkt\QueryBuilding\DateIntervals\AbstractInterval; use Lkt\Factory\Instantiator\Instantiator; use Lkt\Factory\Schemas\Schema; class TranslationStackQueryBuilder extends Query { const COMPONENT = 'lmm-i18n-stack'; /** @return \LaminimCMS\Generated\TranslationStackQueryBuilder */ public static function getCaller() { $schema = Schema::get(static::COMPONENT); /** @var \LaminimCMS\Generated\TranslationStackQueryBuilder $r */ $r = static::table($schema->getTable()); Instantiator::prepareQueryCaller(static::COMPONENT, $r); return $r; } public function andIdEqual(int $value) { return $this->andIntegerEqual('id', $value); } public function andIdNot(int $value) { return $this->andIntegerNot('id', $value); } public function andIdGreaterThan(int $value) { return $this->andIntegerGreaterThan('id', $value); } public function andIdGreaterOrEqualThan(int $value) { return $this->andIntegerGreaterOrEqualThan('id', $value); } public function andIdLowerThan(int $value) { return $this->andIntegerLowerThan('id', $value); } public function andIdLowerOrEqualThan(int $value) { return $this->andIntegerLowerOrEqualThan('id', $value); } public function andIdBetween(int $from, int $to) { return $this->andIntegerBetween('id', $from, $to); } public function andIdIn(array $values) { return $this->andIntegerIn('id', $values); } public function andIdNotIn(array $values) { return $this->andIntegerNotIn('id', $values); } public function andIdEqualToField(string $component, string $field ) { return $this->andFieldEqualToField('id', $component, $field); } public function orIdEqual(int $value) { return $this->orIntegerEqual('id', $value); } public function orIdNot(int $value) { return $this->orIntegerNot('id', $value); } public function orIdGreaterThan(int $value) { return $this->orIntegerGreaterThan('id', $value); } public function orIdGreaterOrEqualThan(int $value) { return $this->orIntegerGreaterOrEqualThan('id', $value); } public function orIdLowerThan(int $value) { return $this->orIntegerLowerThan('id', $value); } public function orIdLowerOrEqualThan(int $value) { return $this->orIntegerLowerOrEqualThan('id', $value); } public function orIdBetween(int $from, int $to) { return $this->orIntegerBetween('id', $from, $to); } public function orIdIn(array $values) { return $this->orIntegerIn('id', $values); } public function orIdNotIn(array $values) { return $this->orIntegerNotIn('id', $values); } public function orIdEqualToField(string $component, string $field ) { return $this->orFieldEqualToField('id', $component, $field); } public function andNameEqual(string $value) { return $this->andStringEqual('name', $value); } public function andNameNot(string $value) { return $this->andStringNot('name', $value); } public function andNameLike(string $value) { return $this->andStringLike('name', $value); } public function andNameNotLike(string $value) { return $this->andStringNotLike('name', $value); } public function andNameBeginsLike(string $value) { return $this->andStringBeginsLike('name', $value); } public function andNameNotBeginsLike(string $value) { return $this->andStringNotBeginsLike('name', $value); } public function andNameEndsLike(string $value) { return $this->andStringEndsLike('name', $value); } public function andNameNotEndsLike(string $value) { return $this->andStringNotEndsLike('name', $value); } public function andNameIn(array $values) { return $this->andStringIn('name', $values); } public function andNameNotIn(array $values) { return $this->andStringNotIn('name', $values); } public function orNameEqual(string $value) { return $this->orStringEqual('name', $value); } public function orNameNot(string $value) { return $this->orStringNot('name', $value); } public function orNameLike(string $value) { return $this->orStringLike('name', $value); } public function orNameNotLike(string $value) { return $this->orStringNotLike('name', $value); } public function orNameBeginsLike(string $value) { return $this->orStringBeginsLike('name', $value); } public function orNameNotBeginsLike(string $value) { return $this->orStringNotBeginsLike('name', $value); } public function orNameEndsLike(string $value) { return $this->orStringEndsLike('name', $value); } public function orNameNotEndsLike(string $value) { return $this->orStringNotEndsLike('name', $value); } public function orNameIn(array $values) { return $this->orStringIn('name', $values); } public function orNameNotIn(array $values) { return $this->orStringNotIn('name', $values); } public function andPropertyEqual(string $value) { return $this->andStringEqual('property', $value); } public function andPropertyNot(string $value) { return $this->andStringNot('property', $value); } public function andPropertyLike(string $value) { return $this->andStringLike('property', $value); } public function andPropertyNotLike(string $value) { return $this->andStringNotLike('property', $value); } public function andPropertyBeginsLike(string $value) { return $this->andStringBeginsLike('property', $value); } public function andPropertyNotBeginsLike(string $value) { return $this->andStringNotBeginsLike('property', $value); } public function andPropertyEndsLike(string $value) { return $this->andStringEndsLike('property', $value); } public function andPropertyNotEndsLike(string $value) { return $this->andStringNotEndsLike('property', $value); } public function andPropertyIn(array $values) { return $this->andStringIn('property', $values); } public function andPropertyNotIn(array $values) { return $this->andStringNotIn('property', $values); } public function orPropertyEqual(string $value) { return $this->orStringEqual('property', $value); } public function orPropertyNot(string $value) { return $this->orStringNot('property', $value); } public function orPropertyLike(string $value) { return $this->orStringLike('property', $value); } public function orPropertyNotLike(string $value) { return $this->orStringNotLike('property', $value); } public function orPropertyBeginsLike(string $value) { return $this->orStringBeginsLike('property', $value); } public function orPropertyNotBeginsLike(string $value) { return $this->orStringNotBeginsLike('property', $value); } public function orPropertyEndsLike(string $value) { return $this->orStringEndsLike('property', $value); } public function orPropertyNotEndsLike(string $value) { return $this->orStringNotEndsLike('property', $value); } public function orPropertyIn(array $values) { return $this->orStringIn('property', $values); } public function orPropertyNotIn(array $values) { return $this->orStringNotIn('property', $values); } public function andRequiredAdminPermsIsTrue() { return $this->andBooleanTrue('required_admin_perms'); } public function andRequiredAdminPermsIsFalse() { return $this->andBooleanFalse('required_admin_perms'); } public function orRequiredAdminPermsIsTrue() { return $this->orBooleanTrue('required_admin_perms'); } public function orRequiredAdminPermsIsFalse() { return $this->orBooleanFalse('required_admin_perms'); } public function andOnlyForCmsIsTrue() { return $this->andBooleanTrue('only_for_cms'); } public function andOnlyForCmsIsFalse() { return $this->andBooleanFalse('only_for_cms'); } public function orOnlyForCmsIsTrue() { return $this->orBooleanTrue('only_for_cms'); } public function orOnlyForCmsIsFalse() { return $this->orBooleanFalse('only_for_cms'); } }