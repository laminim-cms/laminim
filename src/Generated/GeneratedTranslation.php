<?php  namespace LaminimCMS\Generated; use Lkt\QueryBuilding\Where; use Lkt\QueryBuilding\Query; use Lkt\Factory\Instantiator\Instantiator; class GeneratedTranslation extends \Lkt\Factory\Instantiator\Instances\AbstractInstance { const GENERATED_TYPE = 'lmm-i18n'; const COMPONENT = 'lmm-i18n'; public function getId() :int { return $this->_getIntegerVal('id'); } public function hasId() :bool { return $this->_hasIntegerVal('id'); } /** @return \LaminimCMS\Instances\Translation */ public function setId(int $id) { $this->_setIntegerVal('id', $id); return $this; } public function getStackId(): int { return $this->_getIntegerVal('stackId'); } public function hasStackId() :bool { return $this->_hasIntegerVal('stackId'); } /** @return \LaminimCMS\Instances\Translation*/ public function setStackId(int $stackId) { $this->_setIntegerVal('stackId', $stackId); return $this; } /** @return \LaminimCMS\Instances\TranslationStack*/ public function getStack() :?\LaminimCMS\Instances\TranslationStack { return $this->_getForeignVal('lmm-i18n-stack', $this->getStackId(), 'stack'); } public function hasStack() :bool { return $this->_hasForeignVal('lmm-i18n-stack', $this->getStackId(), 'stack'); } public function getType() :string { return $this->_getStringChoiceVal('type'); } public function hasType() :bool { return $this->_hasStringChoiceVal('type'); } public function hasTypeIn(array $values) :bool { return $this->_stringChoiceIn('type', $values); } public function typeIs(string $value) :bool { return $this->_stringChoiceEqual('type', $value); } /** @return \LaminimCMS\Instances\Translation */ public function setType(string $type) { $this->_setStringChoiceVal('type', $type); return $this; } public function typeIsText() :bool { return $this->_getStringChoiceVal('type') === 'text'; } /** @return \LaminimCMS\Instances\Translation*/ public function setTypeText() { $this->_setStringChoiceVal('type', 'text'); return $this; } public function typeIsTextarea() :bool { return $this->_getStringChoiceVal('type') === 'textarea'; } /** @return \LaminimCMS\Instances\Translation*/ public function setTypeTextarea() { $this->_setStringChoiceVal('type', 'textarea'); return $this; } public function typeIsEditor() :bool { return $this->_getStringChoiceVal('type') === 'editor'; } /** @return \LaminimCMS\Instances\Translation*/ public function setTypeEditor() { $this->_setStringChoiceVal('type', 'editor'); return $this; } public function typeIsChoice() :bool { return $this->_getStringChoiceVal('type') === 'choice'; } /** @return \LaminimCMS\Instances\Translation*/ public function setTypeChoice() { $this->_setStringChoiceVal('type', 'choice'); return $this; } public function getProperty() :string { return $this->_getStringVal('property'); } public function hasProperty() :bool { return $this->_hasStringVal('property'); } /** @return \LaminimCMS\Instances\Translation */ public function setProperty(string $property) { $this->_setStringVal('property', $property); return $this; } public function getValue() :string { return $this->_getStringVal('value'); } public function hasValue() :bool { return $this->_hasStringVal('value'); } /** @return \LaminimCMS\Instances\Translation */ public function setValue(string $value) { $this->_setStringVal('value', $value); return $this; } public function getValueEn() :string { return $this->_getStringVal('valueEn'); } public function hasValueEn() :bool { return $this->_hasStringVal('valueEn'); } /** @return \LaminimCMS\Instances\Translation */ public function setValueEn(string $valueEn) { $this->_setStringVal('valueEn', $valueEn); return $this; } public function getValueEs() :string { return $this->_getStringVal('valueEs'); } public function hasValueEs() :bool { return $this->_hasStringVal('valueEs'); } /** @return \LaminimCMS\Instances\Translation */ public function setValueEs(string $valueEs) { $this->_setStringVal('valueEs', $valueEs); return $this; } public function getCreatedAt(): ?\Carbon\Carbon { return $this->_getDateTimeVal('createdAt'); } public function getCreatedAtFormatted(string $format = null) :string { return $this->_getDateTimeFormattedVal('createdAt', $format); } public function getCreatedAtIntlFormatted(string $format = null) :string { return $this->_getDateTimeFormattedIntlVal('createdAt', $format); } public function hasCreatedAt() :bool { return $this->_hasDateTimeVal('createdAt'); } /** @return \LaminimCMS\Instances\Translation*/ public function setCreatedAt($createdAt) { $this->_setDateTimeVal('createdAt', $createdAt); return $this; } /** @return \LaminimCMS\Instances\ModularOption[] */ public function getModularOptions(): array { return $this->_getRelatedVal('lmm-modular-option', 'modularOptions'); } /** @return \LaminimCMS\Instances\ModularOption[] */ public function getModularOptionsPage(int $page, Where $where = null): array { return $this->_getRelatedPage('lmm-modular-option', 'modularOptions', $page, $where); } public function getModularOptionsCount(string $countableField = '', Where $where = null): int { return $this->_getRelatedCount('lmm-modular-option', 'modularOptions', $countableField, $where); } public function getModularOptionsAmountOfPages(string $countableField = '', Where $where = null): int { return $this->_getRelatedAmountOfPages('lmm-modular-option', 'modularOptions', $countableField, $where); } public function hasModularOptions() :bool { return $this->_hasRelatedVal('lmm-modular-option', 'modularOptions'); } /** @return \LaminimCMS\Instances\Translation */ public function setModularOptionsWithData(array $modularOptions) { $this->_setRelatedValWithData('lmm-modular-option', 'modularOptions', $modularOptions); return $this; } /** @return \LaminimCMS\Generated\ModularOptionQueryBuilder */ public function getModularOptionsQueryCaller(): \LaminimCMS\Generated\ModularOptionQueryBuilder { return $this->_getRelatedCustomQueryCaller('lmm-modular-option', 'modularOptions'); } /** * @return \LaminimCMS\Instances\Translation[] */ public static function getMany(Query $builder = null): array { /** @var \LaminimCMS\Instances\Translation[] */ $r = parent::getMany($builder); return $r; } /** * @return \LaminimCMS\Instances\Translation|null */ public static function getOne(Query $builder = null) { /** @var \LaminimCMS\Instances\Translation */ $r = parent::getOne($builder); return $r; } /** @return \LaminimCMS\Generated\TranslationQueryBuilder */ public static function getQueryCaller() { /** * @var \LaminimCMS\Generated\TranslationQueryBuilder $builder */ list($builder) = Instantiator::getCustomQueryCaller(static::GENERATED_TYPE); return $builder; } /** @return \LaminimCMS\Generated\TranslationQueryBuilder */ public static function getFilteredQueryCaller(array $data, array $processRules = null, array $filterRules = null) { /** * @var \LaminimCMS\Generated\TranslationQueryBuilder $caller */ list($builder) = Instantiator::getCustomQueryCaller(static::GENERATED_TYPE, $data, $processRules, $filterRules); return $builder; } /** * @return \LaminimCMS\Instances\Translation[] */ public static function getPage(int $page, Query $builder = null): array { /** @var \LaminimCMS\Instances\Translation[] */ $r = parent::getPage($page, $builder); return $r; } }