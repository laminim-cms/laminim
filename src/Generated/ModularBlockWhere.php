<?php  namespace LaminimCMS\Generated; use Lkt\QueryBuilding\Where; use Lkt\QueryBuilding\DateIntervals\AbstractInterval; class ModularBlockWhere extends Where { const COMPONENT = 'lmm-modular-block'; /** @return \LaminimCMS\Generated\ModularBlockWhere */ public static function getEmpty() { /** @var \LaminimCMS\Generated\ModularBlockWhere $r */ $r = parent::getEmpty(); return $r; } public function andIdEqual(int $value) { return $this->andIntegerEqual('id', $value); } public function andIdNot(int $value) { return $this->andIntegerNot('id', $value); } public function andIdGreaterThan(int $value) { return $this->andIntegerGreaterThan('id', $value); } public function andIdGreaterOrEqualThan(int $value) { return $this->andIntegerGreaterOrEqualThan('id', $value); } public function andIdLowerThan(int $value) { return $this->andIntegerLowerThan('id', $value); } public function andIdLowerOrEqualThan(int $value) { return $this->andIntegerLowerOrEqualThan('id', $value); } public function andIdBetween(int $from, int $to) { return $this->andIntegerBetween('id', $from, $to); } public function andIdIn(array $values) { return $this->andIntegerIn('id', $values); } public function andIdNotIn(array $values) { return $this->andIntegerNotIn('id', $values); } public function andIdEqualToField(string $component, string $field ) { return $this->andFieldEqualToField('id', $component, $field); } public function orIdEqual(int $value) { return $this->orIntegerEqual('id', $value); } public function orIdNot(int $value) { return $this->orIntegerNot('id', $value); } public function orIdGreaterThan(int $value) { return $this->orIntegerGreaterThan('id', $value); } public function orIdGreaterOrEqualThan(int $value) { return $this->orIntegerGreaterOrEqualThan('id', $value); } public function orIdLowerThan(int $value) { return $this->orIntegerLowerThan('id', $value); } public function orIdLowerOrEqualThan(int $value) { return $this->orIntegerLowerOrEqualThan('id', $value); } public function orIdBetween(int $from, int $to) { return $this->orIntegerBetween('id', $from, $to); } public function orIdIn(array $values) { return $this->orIntegerIn('id', $values); } public function orIdNotIn(array $values) { return $this->orIntegerNotIn('id', $values); } public function orIdEqualToField(string $component, string $field ) { return $this->orFieldEqualToField('id', $component, $field); } /** @return \LaminimCMS\Generated\ModularBlockWhere */ public static function idEqual(int $value) { return static::integerEqual('id', $value); } /** @return \LaminimCMS\Generated\ModularBlockWhere */ public static function idNot(int $value) { return static::integerNot('id', $value); } /** @return \LaminimCMS\Generated\ModularBlockWhere */ public static function idGreaterThan(int $value) { return static::integerGreaterThan('id', $value); } /** @return \LaminimCMS\Generated\ModularBlockWhere */ public static function idGreaterOrEqualThan(int $value) { return static::integerGreaterOrEqualThan('id', $value); } /** @return \LaminimCMS\Generated\ModularBlockWhere */ public static function idLowerThan(int $value) { return static::integerLowerThan('id', $value); } /** @return \LaminimCMS\Generated\ModularBlockWhere */ public static function idLowerOrEqualThan(int $value) { return static::integerLowerOrEqualThan('id', $value); } /** @return \LaminimCMS\Generated\ModularBlockWhere */ public static function idBetween(int $from, int $to) { return static::integerBetween('id', $from, $to); } /** @return \LaminimCMS\Generated\ModularBlockWhere */ public static function idIn(array $values) { return static::integerIn('id', $values); } /** @return \LaminimCMS\Generated\ModularBlockWhere */ public static function idNotIn(array $values) { return static::integerNotIn('id', $values); } public function andCreatedAtBetween(string $from, string $to) { return $this->andDatetimeBetween('created_at', $from, $to); } public function andCreatedAtEqual(string $value) { return $this->andDatetimeEqual('created_at', $value); } public function andCreatedAtNot(string $value) { return $this->andDatetimeNot('created_at', $value); } public function andCreatedAtGreaterOrEqualThan(string $value, AbstractInterval $interval = null) { return $this->andDatetimeGreaterOrEqualThan('created_at', $value, $interval); } public function andCreatedAtGreaterOrEqualThanNow(AbstractInterval $interval = null) { return $this->andDatetimeGreaterOrEqualThanNow('created_at', $interval); } public function andCreatedAtGreaterThan(string $value, AbstractInterval $interval = null) { return $this->andDatetimeGreaterThan('created_at', $value, $interval); } public function andCreatedAtGreaterThanNow(AbstractInterval $interval = null) { return $this->andDatetimeGreaterThanNow('created_at', $interval); } public function andCreatedAtLowerOrEqualThan(string $value, AbstractInterval $interval = null) { return $this->andDatetimeLowerOrEqualThan('created_at', $value, $interval); } public function andCreatedAtLowerOrEqualThanNow(AbstractInterval $interval = null) { return $this->andDatetimeLowerOrEqualThanNow('created_at', $interval); } public function andCreatedAtLowerThan(string $value, AbstractInterval $interval = null) { return $this->andDatetimeLowerThan('created_at', $value, $interval); } public function andCreatedAtLowerThanNow(AbstractInterval $interval = null) { return $this->andDatetimeLowerThanNow('created_at', $interval); } public function andCreatedAtLike(string $value) { return $this->andDatetimeLike('created_at', $value); } public function andCreatedAtNotLike(string $value) { return $this->andDatetimeNotLike('created_at', $value); } public function andCreatedAtBeginsLike(string $value) { return $this->andDatetimeBeginsLike('created_at', $value); } public function andCreatedAtNotBeginsLike(string $value) { return $this->andDatetimeNotBeginsLike('created_at', $value); } public function andCreatedAtEndsLike(string $value) { return $this->andDatetimeEndsLike('created_at', $value); } public function andCreatedAtNotEndsLike(string $value) { return $this->andDatetimeNotEndsLike('created_at', $value); } public function orCreatedAtBetween(string $from, string $to) { return $this->orDatetimeBetween('created_at', $from, $to); } public function orCreatedAtEqual(string $value) { return $this->orDatetimeEqual('created_at', $value); } public function orCreatedAtNot(string $value) { return $this->orDatetimeNot('created_at', $value); } public function orCreatedAtGreaterOrEqualThan(string $value, AbstractInterval $interval = null) { return $this->orDatetimeGreaterOrEqualThan('created_at', $value, $interval); } public function orCreatedAtGreaterOrEqualThanNow(AbstractInterval $interval = null) { return $this->orDatetimeGreaterOrEqualThanNow('created_at', $interval); } public function orCreatedAtGreaterThan(string $value, AbstractInterval $interval = null) { return $this->orDatetimeGreaterThan('created_at', $value, $interval); } public function orCreatedAtGreaterThanNow(AbstractInterval $interval = null) { return $this->orDatetimeGreaterThanNow('created_at', $interval); } public function orCreatedAtLowerOrEqualThan(string $value, AbstractInterval $interval = null) { return $this->orDatetimeLowerOrEqualThan('created_at', $value, $interval); } public function orCreatedAtLowerOrEqualThanNow(AbstractInterval $interval = null) { return $this->orDatetimeLowerOrEqualThanNow('created_at', $interval); } public function orCreatedAtLowerThan(string $value, AbstractInterval $interval = null) { return $this->orDatetimeLowerThan('created_at', $value, $interval); } public function orCreatedAtLowerThanNow(AbstractInterval $interval = null) { return $this->orDatetimeLowerThanNow('created_at', $interval); } public function orCreatedAtLike(string $value) { return $this->orDatetimeLike('created_at', $value); } public function orCreatedAtNotLike(string $value) { return $this->orDatetimeNotLike('created_at', $value); } public function orCreatedAtBeginsLike(string $value) { return $this->orDatetimeBeginsLike('created_at', $value); } public function orCreatedAtNotBeginsLike(string $value) { return $this->orDatetimeNotBeginsLike('created_at', $value); } public function orCreatedAtEndsLike(string $value) { return $this->orDatetimeEndsLike('created_at', $value); } public function orCreatedAtNotEndsLike(string $value) { return $this->orDatetimeNotEndsLike('created_at', $value); } /** @return \LaminimCMS\Generated\ModularBlockWhere */ public static function createdAtBetween(string $from, string $to) { return static::datetimeBetween('created_at', $from, $to); } public static function createdAtEqual(string $value) { return static::datetimeEqual('created_at', $value); } public static function createdAtNot(string $value) { return static::datetimeNot('created_at', $value); } public static function createdAtGreaterOrEqualThan(string $value, AbstractInterval $interval = null) { return static::datetimeGreaterOrEqualThan('created_at', $value, $interval); } public static function createdAtGreaterOrEqualThanNow(AbstractInterval $interval = null) { return static::datetimeGreaterOrEqualThanNow('created_at', $interval); } public static function createdAtGreaterThan(string $value, AbstractInterval $interval = null) { return static::datetimeGreaterThan('created_at', $value, $interval); } public static function createdAtGreaterThanNow(AbstractInterval $interval = null) { return static::datetimeGreaterThanNow('created_at', $interval); } public static function createdAtLowerOrEqualThan(string $value, AbstractInterval $interval = null) { return static::datetimeLowerOrEqualThan('created_at', $value, $interval); } public static function createdAtLowerOrEqualThanNow(AbstractInterval $interval = null) { return static::datetimeLowerOrEqualThanNow('created_at', $interval); } public static function createdAtLowerThan(string $value, AbstractInterval $interval = null) { return static::datetimeLowerThan('created_at', $value, $interval); } public static function createdAtLowerThanNow(AbstractInterval $interval = null) { return static::datetimeLowerThanNow('created_at', $interval); } public static function createdAtLike(string $value) { return static::datetimeLike('created_at', $value); } public static function createdAtNotLike(string $value) { return static::datetimeNotLike('created_at', $value); } public static function createdAtBeginsLike(string $value) { return static::datetimeBeginsLike('created_at', $value); } public static function createdAtNotBeginsLike(string $value) { return static::datetimeNotBeginsLike('created_at', $value); } public static function createdAtEndsLike(string $value) { return static::datetimeEndsLike('created_at', $value); } public static function createdAtNotEndsLike(string $value) { return static::datetimeNotEndsLike('created_at', $value); } public function andCreatedByEqual(int $value) { return $this->andIntegerEqual('created_by', $value); } public function andCreatedByNot(int $value) { return $this->andIntegerNot('created_by', $value); } public function andCreatedByGreaterThan(int $value) { return $this->andIntegerGreaterThan('created_by', $value); } public function andCreatedByGreaterOrEqualThan(int $value) { return $this->andIntegerGreaterOrEqualThan('created_by', $value); } public function andCreatedByLowerThan(int $value) { return $this->andIntegerLowerThan('created_by', $value); } public function andCreatedByLowerOrEqualThan(int $value) { return $this->andIntegerLowerOrEqualThan('created_by', $value); } public function andCreatedByBetween(int $from, int $to) { return $this->andIntegerBetween('created_by', $from, $to); } public function andCreatedByIn(array $values) { return $this->andIntegerIn('created_by', $values); } public function andCreatedByNotIn(array $values) { return $this->andIntegerNotIn('created_by', $values); } public function andCreatedByEqualToField(string $component, string $field ) { return $this->andFieldEqualToField('created_by', $component, $field); } public function orCreatedByEqual(int $value) { return $this->orIntegerEqual('created_by', $value); } public function orCreatedByNot(int $value) { return $this->orIntegerNot('created_by', $value); } public function orCreatedByGreaterThan(int $value) { return $this->orIntegerGreaterThan('created_by', $value); } public function orCreatedByGreaterOrEqualThan(int $value) { return $this->orIntegerGreaterOrEqualThan('created_by', $value); } public function orCreatedByLowerThan(int $value) { return $this->orIntegerLowerThan('created_by', $value); } public function orCreatedByLowerOrEqualThan(int $value) { return $this->orIntegerLowerOrEqualThan('created_by', $value); } public function orCreatedByBetween(int $from, int $to) { return $this->orIntegerBetween('created_by', $from, $to); } public function orCreatedByIn(array $values) { return $this->orIntegerIn('created_by', $values); } public function orCreatedByNotIn(array $values) { return $this->orIntegerNotIn('created_by', $values); } public function orCreatedByEqualToField(string $component, string $field ) { return $this->orFieldEqualToField('created_by', $component, $field); } /** @return \LaminimCMS\Generated\ModularBlockWhere */ public static function createdByEqual(int $value) { return static::integerEqual('created_by', $value); } /** @return \LaminimCMS\Generated\ModularBlockWhere */ public static function createdByNot(int $value) { return static::integerNot('created_by', $value); } /** @return \LaminimCMS\Generated\ModularBlockWhere */ public static function createdByGreaterThan(int $value) { return static::integerGreaterThan('created_by', $value); } /** @return \LaminimCMS\Generated\ModularBlockWhere */ public static function createdByGreaterOrEqualThan(int $value) { return static::integerGreaterOrEqualThan('created_by', $value); } /** @return \LaminimCMS\Generated\ModularBlockWhere */ public static function createdByLowerThan(int $value) { return static::integerLowerThan('created_by', $value); } /** @return \LaminimCMS\Generated\ModularBlockWhere */ public static function createdByLowerOrEqualThan(int $value) { return static::integerLowerOrEqualThan('created_by', $value); } /** @return \LaminimCMS\Generated\ModularBlockWhere */ public static function createdByBetween(int $from, int $to) { return static::integerBetween('created_by', $from, $to); } /** @return \LaminimCMS\Generated\ModularBlockWhere */ public static function createdByIn(array $values) { return static::integerIn('created_by', $values); } /** @return \LaminimCMS\Generated\ModularBlockWhere */ public static function createdByNotIn(array $values) { return static::integerNotIn('created_by', $values); } public function andComponentEqual(string $value) { return $this->andStringEqual('component', $value); } public function andComponentNot(string $value) { return $this->andStringNot('component', $value); } public function andComponentLike(string $value) { return $this->andStringLike('component', $value); } public function andComponentNotLike(string $value) { return $this->andStringNotLike('component', $value); } public function andComponentBeginsLike(string $value) { return $this->andStringBeginsLike('component', $value); } public function andComponentNotBeginsLike(string $value) { return $this->andStringNotBeginsLike('component', $value); } public function andComponentEndsLike(string $value) { return $this->andStringEndsLike('component', $value); } public function andComponentNotEndsLike(string $value) { return $this->andStringNotEndsLike('component', $value); } public function andComponentIn(array $values) { return $this->andStringIn('component', $values); } public function andComponentNotIn(array $values) { return $this->andStringNotIn('component', $values); } public function orComponentEqual(string $value) { return $this->orStringEqual('component', $value); } public function orComponentNot(string $value) { return $this->orStringNot('component', $value); } public function orComponentLike(string $value) { return $this->orStringLike('component', $value); } public function orComponentNotLike(string $value) { return $this->orStringNotLike('component', $value); } public function orComponentBeginsLike(string $value) { return $this->orStringBeginsLike('component', $value); } public function orComponentNotBeginsLike(string $value) { return $this->orStringNotBeginsLike('component', $value); } public function orComponentEndsLike(string $value) { return $this->orStringEndsLike('component', $value); } public function orComponentNotEndsLike(string $value) { return $this->orStringNotEndsLike('component', $value); } public function orComponentIn(array $values) { return $this->orStringIn('component', $values); } public function orComponentNotIn(array $values) { return $this->orStringNotIn('component', $values); } /** @return \LaminimCMS\Generated\ModularBlockWhere */ public static function componentEqual(string $value) { return static::stringEqual('component', $value); } /** @return \LaminimCMS\Generated\ModularBlockWhere */ public static function componentNot(string $value) { return static::stringNot('component', $value); } /** @return \LaminimCMS\Generated\ModularBlockWhere */ public static function componentLike(string $value) { return static::stringLike('component', $value); } /** @return \LaminimCMS\Generated\ModularBlockWhere */ public static function componentNotLike(string $value) { return static::stringNotLike('component', $value); } /** @return \LaminimCMS\Generated\ModularBlockWhere */ public static function componentBeginsLike(string $value) { return static::stringBeginsLike('component', $value); } /** @return \LaminimCMS\Generated\ModularBlockWhere */ public static function componentNotBeginsLike(string $value) { return static::stringNotBeginsLike('component', $value); } /** @return \LaminimCMS\Generated\ModularBlockWhere */ public static function componentEndsLike(string $value) { return static::stringEndsLike('component', $value); } /** @return \LaminimCMS\Generated\ModularBlockWhere */ public static function componentNotEndsLike(string $value) { return static::stringNotEndsLike('component', $value); } /** @return \LaminimCMS\Generated\ModularBlockWhere */ public static function componentIn(array $values) { return static::stringIn('component', $values); } /** @return \LaminimCMS\Generated\ModularBlockWhere */ public static function componentNotIn(array $values) { return static::stringNotIn('component', $values); } public function andContentEqual(string $value) { return $this->andi18nStringEqual('content', $value); } public function andContentNot(string $value) { return $this->andi18nStringNot('content', $value); } public function andContentLike(string $value) { return $this->andi18nStringLike('content', $value); } public function andContentNotLike(string $value) { return $this->andi18nStringNotLike('content', $value); } public function andContentBeginsLike(string $value) { return $this->andi18nStringBeginsLike('content', $value); } public function andContentNotBeginsLike(string $value) { return $this->andi18nStringNotBeginsLike('content', $value); } public function andContentEndsLike(string $value) { return $this->andi18nStringEndsLike('content', $value); } public function andContentNotEndsLike(string $value) { return $this->andi18nStringNotEndsLike('content', $value); } public function andContentIn(array $values) { return $this->andi18nStringIn('content', $values); } public function andContentNotIn(array $values) { return $this->andi18nStringNotIn('content', $values); } public function orContentEqual(string $value) { return $this->ori18nStringEqual('content', $value); } public function orContentNot(string $value) { return $this->ori18nStringNot('content', $value); } public function orContentLike(string $value) { return $this->ori18nStringLike('content', $value); } public function orContentNotLike(string $value) { return $this->ori18nStringNotLike('content', $value); } public function orContentBeginsLike(string $value) { return $this->ori18nStringBeginsLike('content', $value); } public function orContentNotBeginsLike(string $value) { return $this->ori18nStringNotBeginsLike('content', $value); } public function orContentEndsLike(string $value) { return $this->ori18nStringEndsLike('content', $value); } public function orContentNotEndsLike(string $value) { return $this->ori18nStringNotEndsLike('content', $value); } public function orContentIn(array $values) { return $this->ori18nStringIn('content', $values); } public function orContentNotIn(array $values) { return $this->ori18nStringNotIn('content', $values); } /** @return \LaminimCMS\Generated\ModularBlockWhere */ public static function contentEqual(string $value) { return static::i18nStringEqual('content', $value); } /** @return \LaminimCMS\Generated\ModularBlockWhere */ public static function contentNot(string $value) { return static::i18nStringNot('content', $value); } /** @return \LaminimCMS\Generated\ModularBlockWhere */ public static function contentLike(string $value) { return static::i18nStringLike('content', $value); } /** @return \LaminimCMS\Generated\ModularBlockWhere */ public static function contentNotLike(string $value) { return static::i18nStringNotLike('content', $value); } /** @return \LaminimCMS\Generated\ModularBlockWhere */ public static function contentBeginsLike(string $value) { return static::i18nStringBeginsLike('content', $value); } /** @return \LaminimCMS\Generated\ModularBlockWhere */ public static function contentNotBeginsLike(string $value) { return static::i18nStringNotBeginsLike('content', $value); } /** @return \LaminimCMS\Generated\ModularBlockWhere */ public static function contentEndsLike(string $value) { return static::i18nStringEndsLike('content', $value); } /** @return \LaminimCMS\Generated\ModularBlockWhere */ public static function contentNotEndsLike(string $value) { return static::i18nStringNotEndsLike('content', $value); } /** @return \LaminimCMS\Generated\ModularBlockWhere */ public static function contentIn(array $values) { return static::i18nStringIn('content', $values); } /** @return \LaminimCMS\Generated\ModularBlockWhere */ public static function contentNotIn(array $values) { return static::i18nStringNotIn('content', $values); } public function andTitleEqual(string $value) { return $this->andi18nStringEqual('title', $value); } public function andTitleNot(string $value) { return $this->andi18nStringNot('title', $value); } public function andTitleLike(string $value) { return $this->andi18nStringLike('title', $value); } public function andTitleNotLike(string $value) { return $this->andi18nStringNotLike('title', $value); } public function andTitleBeginsLike(string $value) { return $this->andi18nStringBeginsLike('title', $value); } public function andTitleNotBeginsLike(string $value) { return $this->andi18nStringNotBeginsLike('title', $value); } public function andTitleEndsLike(string $value) { return $this->andi18nStringEndsLike('title', $value); } public function andTitleNotEndsLike(string $value) { return $this->andi18nStringNotEndsLike('title', $value); } public function andTitleIn(array $values) { return $this->andi18nStringIn('title', $values); } public function andTitleNotIn(array $values) { return $this->andi18nStringNotIn('title', $values); } public function orTitleEqual(string $value) { return $this->ori18nStringEqual('title', $value); } public function orTitleNot(string $value) { return $this->ori18nStringNot('title', $value); } public function orTitleLike(string $value) { return $this->ori18nStringLike('title', $value); } public function orTitleNotLike(string $value) { return $this->ori18nStringNotLike('title', $value); } public function orTitleBeginsLike(string $value) { return $this->ori18nStringBeginsLike('title', $value); } public function orTitleNotBeginsLike(string $value) { return $this->ori18nStringNotBeginsLike('title', $value); } public function orTitleEndsLike(string $value) { return $this->ori18nStringEndsLike('title', $value); } public function orTitleNotEndsLike(string $value) { return $this->ori18nStringNotEndsLike('title', $value); } public function orTitleIn(array $values) { return $this->ori18nStringIn('title', $values); } public function orTitleNotIn(array $values) { return $this->ori18nStringNotIn('title', $values); } /** @return \LaminimCMS\Generated\ModularBlockWhere */ public static function titleEqual(string $value) { return static::i18nStringEqual('title', $value); } /** @return \LaminimCMS\Generated\ModularBlockWhere */ public static function titleNot(string $value) { return static::i18nStringNot('title', $value); } /** @return \LaminimCMS\Generated\ModularBlockWhere */ public static function titleLike(string $value) { return static::i18nStringLike('title', $value); } /** @return \LaminimCMS\Generated\ModularBlockWhere */ public static function titleNotLike(string $value) { return static::i18nStringNotLike('title', $value); } /** @return \LaminimCMS\Generated\ModularBlockWhere */ public static function titleBeginsLike(string $value) { return static::i18nStringBeginsLike('title', $value); } /** @return \LaminimCMS\Generated\ModularBlockWhere */ public static function titleNotBeginsLike(string $value) { return static::i18nStringNotBeginsLike('title', $value); } /** @return \LaminimCMS\Generated\ModularBlockWhere */ public static function titleEndsLike(string $value) { return static::i18nStringEndsLike('title', $value); } /** @return \LaminimCMS\Generated\ModularBlockWhere */ public static function titleNotEndsLike(string $value) { return static::i18nStringNotEndsLike('title', $value); } /** @return \LaminimCMS\Generated\ModularBlockWhere */ public static function titleIn(array $values) { return static::i18nStringIn('title', $values); } /** @return \LaminimCMS\Generated\ModularBlockWhere */ public static function titleNotIn(array $values) { return static::i18nStringNotIn('title', $values); } public function andTypeEqual(string $value) { return $this->andStringEqual('type', $value); } public function andTypeNot(string $value) { return $this->andStringNot('type', $value); } public function andTypeLike(string $value) { return $this->andStringLike('type', $value); } public function andTypeNotLike(string $value) { return $this->andStringNotLike('type', $value); } public function andTypeBeginsLike(string $value) { return $this->andStringBeginsLike('type', $value); } public function andTypeNotBeginsLike(string $value) { return $this->andStringNotBeginsLike('type', $value); } public function andTypeEndsLike(string $value) { return $this->andStringEndsLike('type', $value); } public function andTypeNotEndsLike(string $value) { return $this->andStringNotEndsLike('type', $value); } public function andTypeIn(array $values) { return $this->andStringIn('type', $values); } public function andTypeNotIn(array $values) { return $this->andStringNotIn('type', $values); } public function orTypeEqual(string $value) { return $this->orStringEqual('type', $value); } public function orTypeNot(string $value) { return $this->orStringNot('type', $value); } public function orTypeLike(string $value) { return $this->orStringLike('type', $value); } public function orTypeNotLike(string $value) { return $this->orStringNotLike('type', $value); } public function orTypeBeginsLike(string $value) { return $this->orStringBeginsLike('type', $value); } public function orTypeNotBeginsLike(string $value) { return $this->orStringNotBeginsLike('type', $value); } public function orTypeEndsLike(string $value) { return $this->orStringEndsLike('type', $value); } public function orTypeNotEndsLike(string $value) { return $this->orStringNotEndsLike('type', $value); } public function orTypeIn(array $values) { return $this->orStringIn('type', $values); } public function orTypeNotIn(array $values) { return $this->orStringNotIn('type', $values); } /** @return \LaminimCMS\Generated\ModularBlockWhere */ public static function typeEqual(string $value) { return static::stringEqual('type', $value); } /** @return \LaminimCMS\Generated\ModularBlockWhere */ public static function typeNot(string $value) { return static::stringNot('type', $value); } /** @return \LaminimCMS\Generated\ModularBlockWhere */ public static function typeLike(string $value) { return static::stringLike('type', $value); } /** @return \LaminimCMS\Generated\ModularBlockWhere */ public static function typeNotLike(string $value) { return static::stringNotLike('type', $value); } /** @return \LaminimCMS\Generated\ModularBlockWhere */ public static function typeBeginsLike(string $value) { return static::stringBeginsLike('type', $value); } /** @return \LaminimCMS\Generated\ModularBlockWhere */ public static function typeNotBeginsLike(string $value) { return static::stringNotBeginsLike('type', $value); } /** @return \LaminimCMS\Generated\ModularBlockWhere */ public static function typeEndsLike(string $value) { return static::stringEndsLike('type', $value); } /** @return \LaminimCMS\Generated\ModularBlockWhere */ public static function typeNotEndsLike(string $value) { return static::stringNotEndsLike('type', $value); } /** @return \LaminimCMS\Generated\ModularBlockWhere */ public static function typeIn(array $values) { return static::stringIn('type', $values); } /** @return \LaminimCMS\Generated\ModularBlockWhere */ public static function typeNotIn(array $values) { return static::stringNotIn('type', $values); } public function andElementIdEqual(string $value) { return $this->andStringEqual('element_id', $value); } public function andElementIdNot(string $value) { return $this->andStringNot('element_id', $value); } public function andElementIdLike(string $value) { return $this->andStringLike('element_id', $value); } public function andElementIdNotLike(string $value) { return $this->andStringNotLike('element_id', $value); } public function andElementIdBeginsLike(string $value) { return $this->andStringBeginsLike('element_id', $value); } public function andElementIdNotBeginsLike(string $value) { return $this->andStringNotBeginsLike('element_id', $value); } public function andElementIdEndsLike(string $value) { return $this->andStringEndsLike('element_id', $value); } public function andElementIdNotEndsLike(string $value) { return $this->andStringNotEndsLike('element_id', $value); } public function andElementIdIn(array $values) { return $this->andStringIn('element_id', $values); } public function andElementIdNotIn(array $values) { return $this->andStringNotIn('element_id', $values); } public function orElementIdEqual(string $value) { return $this->orStringEqual('element_id', $value); } public function orElementIdNot(string $value) { return $this->orStringNot('element_id', $value); } public function orElementIdLike(string $value) { return $this->orStringLike('element_id', $value); } public function orElementIdNotLike(string $value) { return $this->orStringNotLike('element_id', $value); } public function orElementIdBeginsLike(string $value) { return $this->orStringBeginsLike('element_id', $value); } public function orElementIdNotBeginsLike(string $value) { return $this->orStringNotBeginsLike('element_id', $value); } public function orElementIdEndsLike(string $value) { return $this->orStringEndsLike('element_id', $value); } public function orElementIdNotEndsLike(string $value) { return $this->orStringNotEndsLike('element_id', $value); } public function orElementIdIn(array $values) { return $this->orStringIn('element_id', $values); } public function orElementIdNotIn(array $values) { return $this->orStringNotIn('element_id', $values); } /** @return \LaminimCMS\Generated\ModularBlockWhere */ public static function elementIdEqual(string $value) { return static::stringEqual('element_id', $value); } /** @return \LaminimCMS\Generated\ModularBlockWhere */ public static function elementIdNot(string $value) { return static::stringNot('element_id', $value); } /** @return \LaminimCMS\Generated\ModularBlockWhere */ public static function elementIdLike(string $value) { return static::stringLike('element_id', $value); } /** @return \LaminimCMS\Generated\ModularBlockWhere */ public static function elementIdNotLike(string $value) { return static::stringNotLike('element_id', $value); } /** @return \LaminimCMS\Generated\ModularBlockWhere */ public static function elementIdBeginsLike(string $value) { return static::stringBeginsLike('element_id', $value); } /** @return \LaminimCMS\Generated\ModularBlockWhere */ public static function elementIdNotBeginsLike(string $value) { return static::stringNotBeginsLike('element_id', $value); } /** @return \LaminimCMS\Generated\ModularBlockWhere */ public static function elementIdEndsLike(string $value) { return static::stringEndsLike('element_id', $value); } /** @return \LaminimCMS\Generated\ModularBlockWhere */ public static function elementIdNotEndsLike(string $value) { return static::stringNotEndsLike('element_id', $value); } /** @return \LaminimCMS\Generated\ModularBlockWhere */ public static function elementIdIn(array $values) { return static::stringIn('element_id', $values); } /** @return \LaminimCMS\Generated\ModularBlockWhere */ public static function elementIdNotIn(array $values) { return static::stringNotIn('element_id', $values); } public function andItemTypeEqual(string $value) { return $this->andStringEqual('item_type', $value); } public function andItemTypeNot(string $value) { return $this->andStringNot('item_type', $value); } public function andItemTypeLike(string $value) { return $this->andStringLike('item_type', $value); } public function andItemTypeNotLike(string $value) { return $this->andStringNotLike('item_type', $value); } public function andItemTypeBeginsLike(string $value) { return $this->andStringBeginsLike('item_type', $value); } public function andItemTypeNotBeginsLike(string $value) { return $this->andStringNotBeginsLike('item_type', $value); } public function andItemTypeEndsLike(string $value) { return $this->andStringEndsLike('item_type', $value); } public function andItemTypeNotEndsLike(string $value) { return $this->andStringNotEndsLike('item_type', $value); } public function andItemTypeIn(array $values) { return $this->andStringIn('item_type', $values); } public function andItemTypeNotIn(array $values) { return $this->andStringNotIn('item_type', $values); } public function orItemTypeEqual(string $value) { return $this->orStringEqual('item_type', $value); } public function orItemTypeNot(string $value) { return $this->orStringNot('item_type', $value); } public function orItemTypeLike(string $value) { return $this->orStringLike('item_type', $value); } public function orItemTypeNotLike(string $value) { return $this->orStringNotLike('item_type', $value); } public function orItemTypeBeginsLike(string $value) { return $this->orStringBeginsLike('item_type', $value); } public function orItemTypeNotBeginsLike(string $value) { return $this->orStringNotBeginsLike('item_type', $value); } public function orItemTypeEndsLike(string $value) { return $this->orStringEndsLike('item_type', $value); } public function orItemTypeNotEndsLike(string $value) { return $this->orStringNotEndsLike('item_type', $value); } public function orItemTypeIn(array $values) { return $this->orStringIn('item_type', $values); } public function orItemTypeNotIn(array $values) { return $this->orStringNotIn('item_type', $values); } /** @return \LaminimCMS\Generated\ModularBlockWhere */ public static function itemTypeEqual(string $value) { return static::stringEqual('item_type', $value); } /** @return \LaminimCMS\Generated\ModularBlockWhere */ public static function itemTypeNot(string $value) { return static::stringNot('item_type', $value); } /** @return \LaminimCMS\Generated\ModularBlockWhere */ public static function itemTypeLike(string $value) { return static::stringLike('item_type', $value); } /** @return \LaminimCMS\Generated\ModularBlockWhere */ public static function itemTypeNotLike(string $value) { return static::stringNotLike('item_type', $value); } /** @return \LaminimCMS\Generated\ModularBlockWhere */ public static function itemTypeBeginsLike(string $value) { return static::stringBeginsLike('item_type', $value); } /** @return \LaminimCMS\Generated\ModularBlockWhere */ public static function itemTypeNotBeginsLike(string $value) { return static::stringNotBeginsLike('item_type', $value); } /** @return \LaminimCMS\Generated\ModularBlockWhere */ public static function itemTypeEndsLike(string $value) { return static::stringEndsLike('item_type', $value); } /** @return \LaminimCMS\Generated\ModularBlockWhere */ public static function itemTypeNotEndsLike(string $value) { return static::stringNotEndsLike('item_type', $value); } /** @return \LaminimCMS\Generated\ModularBlockWhere */ public static function itemTypeIn(array $values) { return static::stringIn('item_type', $values); } /** @return \LaminimCMS\Generated\ModularBlockWhere */ public static function itemTypeNotIn(array $values) { return static::stringNotIn('item_type', $values); } public function andItemEqual(int $value) { return $this->andIntegerEqual('item_id', $value); } public function andItemNot(int $value) { return $this->andIntegerNot('item_id', $value); } public function andItemGreaterThan(int $value) { return $this->andIntegerGreaterThan('item_id', $value); } public function andItemGreaterOrEqualThan(int $value) { return $this->andIntegerGreaterOrEqualThan('item_id', $value); } public function andItemLowerThan(int $value) { return $this->andIntegerLowerThan('item_id', $value); } public function andItemLowerOrEqualThan(int $value) { return $this->andIntegerLowerOrEqualThan('item_id', $value); } public function andItemBetween(int $from, int $to) { return $this->andIntegerBetween('item_id', $from, $to); } public function andItemIn(array $values) { return $this->andIntegerIn('item_id', $values); } public function andItemNotIn(array $values) { return $this->andIntegerNotIn('item_id', $values); } public function andItemEqualToField(string $component, string $field ) { return $this->andFieldEqualToField('item_id', $component, $field); } public function orItemEqual(int $value) { return $this->orIntegerEqual('item_id', $value); } public function orItemNot(int $value) { return $this->orIntegerNot('item_id', $value); } public function orItemGreaterThan(int $value) { return $this->orIntegerGreaterThan('item_id', $value); } public function orItemGreaterOrEqualThan(int $value) { return $this->orIntegerGreaterOrEqualThan('item_id', $value); } public function orItemLowerThan(int $value) { return $this->orIntegerLowerThan('item_id', $value); } public function orItemLowerOrEqualThan(int $value) { return $this->orIntegerLowerOrEqualThan('item_id', $value); } public function orItemBetween(int $from, int $to) { return $this->orIntegerBetween('item_id', $from, $to); } public function orItemIn(array $values) { return $this->orIntegerIn('item_id', $values); } public function orItemNotIn(array $values) { return $this->orIntegerNotIn('item_id', $values); } public function orItemEqualToField(string $component, string $field ) { return $this->orFieldEqualToField('item_id', $component, $field); } /** @return \LaminimCMS\Generated\ModularBlockWhere */ public static function itemEqual(int $value) { return static::integerEqual('item_id', $value); } /** @return \LaminimCMS\Generated\ModularBlockWhere */ public static function itemNot(int $value) { return static::integerNot('item_id', $value); } /** @return \LaminimCMS\Generated\ModularBlockWhere */ public static function itemGreaterThan(int $value) { return static::integerGreaterThan('item_id', $value); } /** @return \LaminimCMS\Generated\ModularBlockWhere */ public static function itemGreaterOrEqualThan(int $value) { return static::integerGreaterOrEqualThan('item_id', $value); } /** @return \LaminimCMS\Generated\ModularBlockWhere */ public static function itemLowerThan(int $value) { return static::integerLowerThan('item_id', $value); } /** @return \LaminimCMS\Generated\ModularBlockWhere */ public static function itemLowerOrEqualThan(int $value) { return static::integerLowerOrEqualThan('item_id', $value); } /** @return \LaminimCMS\Generated\ModularBlockWhere */ public static function itemBetween(int $from, int $to) { return static::integerBetween('item_id', $from, $to); } /** @return \LaminimCMS\Generated\ModularBlockWhere */ public static function itemIn(array $values) { return static::integerIn('item_id', $values); } /** @return \LaminimCMS\Generated\ModularBlockWhere */ public static function itemNotIn(array $values) { return static::integerNotIn('item_id', $values); } public function andItemsContains($value) { return $this->andForeignKeysContains('items_ids', $value); } public function orItemsContains($value) { return $this->orForeignKeysContains('items_ids', $value); } public function andClassNameEqual(string $value) { return $this->andStringEqual('class_name', $value); } public function andClassNameNot(string $value) { return $this->andStringNot('class_name', $value); } public function andClassNameLike(string $value) { return $this->andStringLike('class_name', $value); } public function andClassNameNotLike(string $value) { return $this->andStringNotLike('class_name', $value); } public function andClassNameBeginsLike(string $value) { return $this->andStringBeginsLike('class_name', $value); } public function andClassNameNotBeginsLike(string $value) { return $this->andStringNotBeginsLike('class_name', $value); } public function andClassNameEndsLike(string $value) { return $this->andStringEndsLike('class_name', $value); } public function andClassNameNotEndsLike(string $value) { return $this->andStringNotEndsLike('class_name', $value); } public function andClassNameIn(array $values) { return $this->andStringIn('class_name', $values); } public function andClassNameNotIn(array $values) { return $this->andStringNotIn('class_name', $values); } public function orClassNameEqual(string $value) { return $this->orStringEqual('class_name', $value); } public function orClassNameNot(string $value) { return $this->orStringNot('class_name', $value); } public function orClassNameLike(string $value) { return $this->orStringLike('class_name', $value); } public function orClassNameNotLike(string $value) { return $this->orStringNotLike('class_name', $value); } public function orClassNameBeginsLike(string $value) { return $this->orStringBeginsLike('class_name', $value); } public function orClassNameNotBeginsLike(string $value) { return $this->orStringNotBeginsLike('class_name', $value); } public function orClassNameEndsLike(string $value) { return $this->orStringEndsLike('class_name', $value); } public function orClassNameNotEndsLike(string $value) { return $this->orStringNotEndsLike('class_name', $value); } public function orClassNameIn(array $values) { return $this->orStringIn('class_name', $values); } public function orClassNameNotIn(array $values) { return $this->orStringNotIn('class_name', $values); } /** @return \LaminimCMS\Generated\ModularBlockWhere */ public static function classNameEqual(string $value) { return static::stringEqual('class_name', $value); } /** @return \LaminimCMS\Generated\ModularBlockWhere */ public static function classNameNot(string $value) { return static::stringNot('class_name', $value); } /** @return \LaminimCMS\Generated\ModularBlockWhere */ public static function classNameLike(string $value) { return static::stringLike('class_name', $value); } /** @return \LaminimCMS\Generated\ModularBlockWhere */ public static function classNameNotLike(string $value) { return static::stringNotLike('class_name', $value); } /** @return \LaminimCMS\Generated\ModularBlockWhere */ public static function classNameBeginsLike(string $value) { return static::stringBeginsLike('class_name', $value); } /** @return \LaminimCMS\Generated\ModularBlockWhere */ public static function classNameNotBeginsLike(string $value) { return static::stringNotBeginsLike('class_name', $value); } /** @return \LaminimCMS\Generated\ModularBlockWhere */ public static function classNameEndsLike(string $value) { return static::stringEndsLike('class_name', $value); } /** @return \LaminimCMS\Generated\ModularBlockWhere */ public static function classNameNotEndsLike(string $value) { return static::stringNotEndsLike('class_name', $value); } /** @return \LaminimCMS\Generated\ModularBlockWhere */ public static function classNameIn(array $values) { return static::stringIn('class_name', $values); } /** @return \LaminimCMS\Generated\ModularBlockWhere */ public static function classNameNotIn(array $values) { return static::stringNotIn('class_name', $values); } public function andColumnsEqual(int $value) { return $this->andIntegerEqual('columns', $value); } public function andColumnsNot(int $value) { return $this->andIntegerNot('columns', $value); } public function andColumnsGreaterThan(int $value) { return $this->andIntegerGreaterThan('columns', $value); } public function andColumnsGreaterOrEqualThan(int $value) { return $this->andIntegerGreaterOrEqualThan('columns', $value); } public function andColumnsLowerThan(int $value) { return $this->andIntegerLowerThan('columns', $value); } public function andColumnsLowerOrEqualThan(int $value) { return $this->andIntegerLowerOrEqualThan('columns', $value); } public function andColumnsBetween(int $from, int $to) { return $this->andIntegerBetween('columns', $from, $to); } public function andColumnsIn(array $values) { return $this->andIntegerIn('columns', $values); } public function andColumnsNotIn(array $values) { return $this->andIntegerNotIn('columns', $values); } public function andColumnsEqualToField(string $component, string $field ) { return $this->andFieldEqualToField('columns', $component, $field); } public function orColumnsEqual(int $value) { return $this->orIntegerEqual('columns', $value); } public function orColumnsNot(int $value) { return $this->orIntegerNot('columns', $value); } public function orColumnsGreaterThan(int $value) { return $this->orIntegerGreaterThan('columns', $value); } public function orColumnsGreaterOrEqualThan(int $value) { return $this->orIntegerGreaterOrEqualThan('columns', $value); } public function orColumnsLowerThan(int $value) { return $this->orIntegerLowerThan('columns', $value); } public function orColumnsLowerOrEqualThan(int $value) { return $this->orIntegerLowerOrEqualThan('columns', $value); } public function orColumnsBetween(int $from, int $to) { return $this->orIntegerBetween('columns', $from, $to); } public function orColumnsIn(array $values) { return $this->orIntegerIn('columns', $values); } public function orColumnsNotIn(array $values) { return $this->orIntegerNotIn('columns', $values); } public function orColumnsEqualToField(string $component, string $field ) { return $this->orFieldEqualToField('columns', $component, $field); } /** @return \LaminimCMS\Generated\ModularBlockWhere */ public static function columnsEqual(int $value) { return static::integerEqual('columns', $value); } /** @return \LaminimCMS\Generated\ModularBlockWhere */ public static function columnsNot(int $value) { return static::integerNot('columns', $value); } /** @return \LaminimCMS\Generated\ModularBlockWhere */ public static function columnsGreaterThan(int $value) { return static::integerGreaterThan('columns', $value); } /** @return \LaminimCMS\Generated\ModularBlockWhere */ public static function columnsGreaterOrEqualThan(int $value) { return static::integerGreaterOrEqualThan('columns', $value); } /** @return \LaminimCMS\Generated\ModularBlockWhere */ public static function columnsLowerThan(int $value) { return static::integerLowerThan('columns', $value); } /** @return \LaminimCMS\Generated\ModularBlockWhere */ public static function columnsLowerOrEqualThan(int $value) { return static::integerLowerOrEqualThan('columns', $value); } /** @return \LaminimCMS\Generated\ModularBlockWhere */ public static function columnsBetween(int $from, int $to) { return static::integerBetween('columns', $from, $to); } /** @return \LaminimCMS\Generated\ModularBlockWhere */ public static function columnsIn(array $values) { return static::integerIn('columns', $values); } /** @return \LaminimCMS\Generated\ModularBlockWhere */ public static function columnsNotIn(array $values) { return static::integerNotIn('columns', $values); } public function andBlocksContains($value) { return $this->andForeignKeysContains('blocks', $value); } public function orBlocksContains($value) { return $this->orForeignKeysContains('blocks', $value); } }