<?php  namespace LaminimCMS\Generated; use Lkt\QueryBuilding\Query; use Lkt\QueryBuilding\DateIntervals\AbstractInterval; use Lkt\Factory\Instantiator\Instantiator; use Lkt\Factory\Schemas\Schema; class VisibilityQueryBuilder extends Query { const COMPONENT = 'lmm-visibility'; /** @return \LaminimCMS\Generated\VisibilityQueryBuilder */ public static function getCaller() { $schema = Schema::get(static::COMPONENT); /** @var \LaminimCMS\Generated\VisibilityQueryBuilder $r */ $r = static::table($schema->getTable()); Instantiator::prepareQueryCaller(static::COMPONENT, $r); return $r; } public function andIdEqual(int $value) { return $this->andIntegerEqual('id', $value); } public function andIdNot(int $value) { return $this->andIntegerNot('id', $value); } public function andIdGreaterThan(int $value) { return $this->andIntegerGreaterThan('id', $value); } public function andIdGreaterOrEqualThan(int $value) { return $this->andIntegerGreaterOrEqualThan('id', $value); } public function andIdLowerThan(int $value) { return $this->andIntegerLowerThan('id', $value); } public function andIdLowerOrEqualThan(int $value) { return $this->andIntegerLowerOrEqualThan('id', $value); } public function andIdBetween(int $from, int $to) { return $this->andIntegerBetween('id', $from, $to); } public function andIdIn(array $values) { return $this->andIntegerIn('id', $values); } public function andIdNotIn(array $values) { return $this->andIntegerNotIn('id', $values); } public function andIdEqualToField(string $component, string $field ) { return $this->andFieldEqualToField('id', $component, $field); } public function orIdEqual(int $value) { return $this->orIntegerEqual('id', $value); } public function orIdNot(int $value) { return $this->orIntegerNot('id', $value); } public function orIdGreaterThan(int $value) { return $this->orIntegerGreaterThan('id', $value); } public function orIdGreaterOrEqualThan(int $value) { return $this->orIntegerGreaterOrEqualThan('id', $value); } public function orIdLowerThan(int $value) { return $this->orIntegerLowerThan('id', $value); } public function orIdLowerOrEqualThan(int $value) { return $this->orIntegerLowerOrEqualThan('id', $value); } public function orIdBetween(int $from, int $to) { return $this->orIntegerBetween('id', $from, $to); } public function orIdIn(array $values) { return $this->orIntegerIn('id', $values); } public function orIdNotIn(array $values) { return $this->orIntegerNotIn('id', $values); } public function orIdEqualToField(string $component, string $field ) { return $this->orFieldEqualToField('id', $component, $field); } public function andCreatedAtBetween(string $from, string $to) { return $this->andDatetimeBetween('created_at', $from, $to); } public function andCreatedAtEqual(string $value) { return $this->andDatetimeEqual('created_at', $value); } public function andCreatedAtNot(string $value) { return $this->andDatetimeNot('created_at', $value); } public function andCreatedAtGreaterOrEqualThan(string $value, AbstractInterval $interval = null) { return $this->andDatetimeGreaterOrEqualThan('created_at', $value, $interval); } public function andCreatedAtGreaterOrEqualThanNow(AbstractInterval $interval = null) { return $this->andDatetimeGreaterOrEqualThanNow('created_at', $interval); } public function andCreatedAtGreaterThan(string $value, AbstractInterval $interval = null) { return $this->andDatetimeGreaterThan('created_at', $value, $interval); } public function andCreatedAtGreaterThanNow(AbstractInterval $interval = null) { return $this->andDatetimeGreaterThanNow('created_at', $interval); } public function andCreatedAtLowerOrEqualThan(string $value, AbstractInterval $interval = null) { return $this->andDatetimeLowerOrEqualThan('created_at', $value, $interval); } public function andCreatedAtLowerOrEqualThanNow(AbstractInterval $interval = null) { return $this->andDatetimeLowerOrEqualThanNow('created_at', $interval); } public function andCreatedAtLowerThan(string $value, AbstractInterval $interval = null) { return $this->andDatetimeLowerThan('created_at', $value, $interval); } public function andCreatedAtLowerThanNow(AbstractInterval $interval = null) { return $this->andDatetimeLowerThanNow('created_at', $interval); } public function andCreatedAtLike(string $value) { return $this->andDatetimeLike('created_at', $value); } public function andCreatedAtNotLike(string $value) { return $this->andDatetimeNotLike('created_at', $value); } public function andCreatedAtBeginsLike(string $value) { return $this->andDatetimeBeginsLike('created_at', $value); } public function andCreatedAtNotBeginsLike(string $value) { return $this->andDatetimeNotBeginsLike('created_at', $value); } public function andCreatedAtEndsLike(string $value) { return $this->andDatetimeEndsLike('created_at', $value); } public function andCreatedAtNotEndsLike(string $value) { return $this->andDatetimeNotEndsLike('created_at', $value); } public function orCreatedAtBetween(string $from, string $to) { return $this->orDatetimeBetween('created_at', $from, $to); } public function orCreatedAtEqual(string $value) { return $this->orDatetimeEqual('created_at', $value); } public function orCreatedAtNot(string $value) { return $this->orDatetimeNot('created_at', $value); } public function orCreatedAtGreaterOrEqualThan(string $value, AbstractInterval $interval = null) { return $this->orDatetimeGreaterOrEqualThan('created_at', $value, $interval); } public function orCreatedAtGreaterOrEqualThanNow(AbstractInterval $interval = null) { return $this->orDatetimeGreaterOrEqualThanNow('created_at', $interval); } public function orCreatedAtGreaterThan(string $value, AbstractInterval $interval = null) { return $this->orDatetimeGreaterThan('created_at', $value, $interval); } public function orCreatedAtGreaterThanNow(AbstractInterval $interval = null) { return $this->orDatetimeGreaterThanNow('created_at', $interval); } public function orCreatedAtLowerOrEqualThan(string $value, AbstractInterval $interval = null) { return $this->orDatetimeLowerOrEqualThan('created_at', $value, $interval); } public function orCreatedAtLowerOrEqualThanNow(AbstractInterval $interval = null) { return $this->orDatetimeLowerOrEqualThanNow('created_at', $interval); } public function orCreatedAtLowerThan(string $value, AbstractInterval $interval = null) { return $this->orDatetimeLowerThan('created_at', $value, $interval); } public function orCreatedAtLowerThanNow(AbstractInterval $interval = null) { return $this->orDatetimeLowerThanNow('created_at', $interval); } public function orCreatedAtLike(string $value) { return $this->orDatetimeLike('created_at', $value); } public function orCreatedAtNotLike(string $value) { return $this->orDatetimeNotLike('created_at', $value); } public function orCreatedAtBeginsLike(string $value) { return $this->orDatetimeBeginsLike('created_at', $value); } public function orCreatedAtNotBeginsLike(string $value) { return $this->orDatetimeNotBeginsLike('created_at', $value); } public function orCreatedAtEndsLike(string $value) { return $this->orDatetimeEndsLike('created_at', $value); } public function orCreatedAtNotEndsLike(string $value) { return $this->orDatetimeNotEndsLike('created_at', $value); } public function andAutoPublishAtBetween(string $from, string $to) { return $this->andDatetimeBetween('auto_publish_at', $from, $to); } public function andAutoPublishAtEqual(string $value) { return $this->andDatetimeEqual('auto_publish_at', $value); } public function andAutoPublishAtNot(string $value) { return $this->andDatetimeNot('auto_publish_at', $value); } public function andAutoPublishAtGreaterOrEqualThan(string $value, AbstractInterval $interval = null) { return $this->andDatetimeGreaterOrEqualThan('auto_publish_at', $value, $interval); } public function andAutoPublishAtGreaterOrEqualThanNow(AbstractInterval $interval = null) { return $this->andDatetimeGreaterOrEqualThanNow('auto_publish_at', $interval); } public function andAutoPublishAtGreaterThan(string $value, AbstractInterval $interval = null) { return $this->andDatetimeGreaterThan('auto_publish_at', $value, $interval); } public function andAutoPublishAtGreaterThanNow(AbstractInterval $interval = null) { return $this->andDatetimeGreaterThanNow('auto_publish_at', $interval); } public function andAutoPublishAtLowerOrEqualThan(string $value, AbstractInterval $interval = null) { return $this->andDatetimeLowerOrEqualThan('auto_publish_at', $value, $interval); } public function andAutoPublishAtLowerOrEqualThanNow(AbstractInterval $interval = null) { return $this->andDatetimeLowerOrEqualThanNow('auto_publish_at', $interval); } public function andAutoPublishAtLowerThan(string $value, AbstractInterval $interval = null) { return $this->andDatetimeLowerThan('auto_publish_at', $value, $interval); } public function andAutoPublishAtLowerThanNow(AbstractInterval $interval = null) { return $this->andDatetimeLowerThanNow('auto_publish_at', $interval); } public function andAutoPublishAtLike(string $value) { return $this->andDatetimeLike('auto_publish_at', $value); } public function andAutoPublishAtNotLike(string $value) { return $this->andDatetimeNotLike('auto_publish_at', $value); } public function andAutoPublishAtBeginsLike(string $value) { return $this->andDatetimeBeginsLike('auto_publish_at', $value); } public function andAutoPublishAtNotBeginsLike(string $value) { return $this->andDatetimeNotBeginsLike('auto_publish_at', $value); } public function andAutoPublishAtEndsLike(string $value) { return $this->andDatetimeEndsLike('auto_publish_at', $value); } public function andAutoPublishAtNotEndsLike(string $value) { return $this->andDatetimeNotEndsLike('auto_publish_at', $value); } public function orAutoPublishAtBetween(string $from, string $to) { return $this->orDatetimeBetween('auto_publish_at', $from, $to); } public function orAutoPublishAtEqual(string $value) { return $this->orDatetimeEqual('auto_publish_at', $value); } public function orAutoPublishAtNot(string $value) { return $this->orDatetimeNot('auto_publish_at', $value); } public function orAutoPublishAtGreaterOrEqualThan(string $value, AbstractInterval $interval = null) { return $this->orDatetimeGreaterOrEqualThan('auto_publish_at', $value, $interval); } public function orAutoPublishAtGreaterOrEqualThanNow(AbstractInterval $interval = null) { return $this->orDatetimeGreaterOrEqualThanNow('auto_publish_at', $interval); } public function orAutoPublishAtGreaterThan(string $value, AbstractInterval $interval = null) { return $this->orDatetimeGreaterThan('auto_publish_at', $value, $interval); } public function orAutoPublishAtGreaterThanNow(AbstractInterval $interval = null) { return $this->orDatetimeGreaterThanNow('auto_publish_at', $interval); } public function orAutoPublishAtLowerOrEqualThan(string $value, AbstractInterval $interval = null) { return $this->orDatetimeLowerOrEqualThan('auto_publish_at', $value, $interval); } public function orAutoPublishAtLowerOrEqualThanNow(AbstractInterval $interval = null) { return $this->orDatetimeLowerOrEqualThanNow('auto_publish_at', $interval); } public function orAutoPublishAtLowerThan(string $value, AbstractInterval $interval = null) { return $this->orDatetimeLowerThan('auto_publish_at', $value, $interval); } public function orAutoPublishAtLowerThanNow(AbstractInterval $interval = null) { return $this->orDatetimeLowerThanNow('auto_publish_at', $interval); } public function orAutoPublishAtLike(string $value) { return $this->orDatetimeLike('auto_publish_at', $value); } public function orAutoPublishAtNotLike(string $value) { return $this->orDatetimeNotLike('auto_publish_at', $value); } public function orAutoPublishAtBeginsLike(string $value) { return $this->orDatetimeBeginsLike('auto_publish_at', $value); } public function orAutoPublishAtNotBeginsLike(string $value) { return $this->orDatetimeNotBeginsLike('auto_publish_at', $value); } public function orAutoPublishAtEndsLike(string $value) { return $this->orDatetimeEndsLike('auto_publish_at', $value); } public function orAutoPublishAtNotEndsLike(string $value) { return $this->orDatetimeNotEndsLike('auto_publish_at', $value); } public function andItemTypeEqual(string $value) { return $this->andStringEqual('item_type', $value); } public function andItemTypeNot(string $value) { return $this->andStringNot('item_type', $value); } public function andItemTypeLike(string $value) { return $this->andStringLike('item_type', $value); } public function andItemTypeNotLike(string $value) { return $this->andStringNotLike('item_type', $value); } public function andItemTypeBeginsLike(string $value) { return $this->andStringBeginsLike('item_type', $value); } public function andItemTypeNotBeginsLike(string $value) { return $this->andStringNotBeginsLike('item_type', $value); } public function andItemTypeEndsLike(string $value) { return $this->andStringEndsLike('item_type', $value); } public function andItemTypeNotEndsLike(string $value) { return $this->andStringNotEndsLike('item_type', $value); } public function andItemTypeIn(array $values) { return $this->andStringIn('item_type', $values); } public function andItemTypeNotIn(array $values) { return $this->andStringNotIn('item_type', $values); } public function orItemTypeEqual(string $value) { return $this->orStringEqual('item_type', $value); } public function orItemTypeNot(string $value) { return $this->orStringNot('item_type', $value); } public function orItemTypeLike(string $value) { return $this->orStringLike('item_type', $value); } public function orItemTypeNotLike(string $value) { return $this->orStringNotLike('item_type', $value); } public function orItemTypeBeginsLike(string $value) { return $this->orStringBeginsLike('item_type', $value); } public function orItemTypeNotBeginsLike(string $value) { return $this->orStringNotBeginsLike('item_type', $value); } public function orItemTypeEndsLike(string $value) { return $this->orStringEndsLike('item_type', $value); } public function orItemTypeNotEndsLike(string $value) { return $this->orStringNotEndsLike('item_type', $value); } public function orItemTypeIn(array $values) { return $this->orStringIn('item_type', $values); } public function orItemTypeNotIn(array $values) { return $this->orStringNotIn('item_type', $values); } public function andItemEqual(int $value) { return $this->andIntegerEqual('item_id', $value); } public function andItemNot(int $value) { return $this->andIntegerNot('item_id', $value); } public function andItemGreaterThan(int $value) { return $this->andIntegerGreaterThan('item_id', $value); } public function andItemGreaterOrEqualThan(int $value) { return $this->andIntegerGreaterOrEqualThan('item_id', $value); } public function andItemLowerThan(int $value) { return $this->andIntegerLowerThan('item_id', $value); } public function andItemLowerOrEqualThan(int $value) { return $this->andIntegerLowerOrEqualThan('item_id', $value); } public function andItemBetween(int $from, int $to) { return $this->andIntegerBetween('item_id', $from, $to); } public function andItemIn(array $values) { return $this->andIntegerIn('item_id', $values); } public function andItemNotIn(array $values) { return $this->andIntegerNotIn('item_id', $values); } public function andItemEqualToField(string $component, string $field ) { return $this->andFieldEqualToField('item_id', $component, $field); } public function orItemEqual(int $value) { return $this->orIntegerEqual('item_id', $value); } public function orItemNot(int $value) { return $this->orIntegerNot('item_id', $value); } public function orItemGreaterThan(int $value) { return $this->orIntegerGreaterThan('item_id', $value); } public function orItemGreaterOrEqualThan(int $value) { return $this->orIntegerGreaterOrEqualThan('item_id', $value); } public function orItemLowerThan(int $value) { return $this->orIntegerLowerThan('item_id', $value); } public function orItemLowerOrEqualThan(int $value) { return $this->orIntegerLowerOrEqualThan('item_id', $value); } public function orItemBetween(int $from, int $to) { return $this->orIntegerBetween('item_id', $from, $to); } public function orItemIn(array $values) { return $this->orIntegerIn('item_id', $values); } public function orItemNotIn(array $values) { return $this->orIntegerNotIn('item_id', $values); } public function orItemEqualToField(string $component, string $field ) { return $this->orFieldEqualToField('item_id', $component, $field); } public function andStatusEqual(string $value) { return $this->andStringEqual('status', $value); } public function andStatusNot(string $value) { return $this->andStringNot('status', $value); } public function andStatusLike(string $value) { return $this->andStringLike('status', $value); } public function andStatusNotLike(string $value) { return $this->andStringNotLike('status', $value); } public function andStatusBeginsLike(string $value) { return $this->andStringBeginsLike('status', $value); } public function andStatusNotBeginsLike(string $value) { return $this->andStringNotBeginsLike('status', $value); } public function andStatusEndsLike(string $value) { return $this->andStringEndsLike('status', $value); } public function andStatusNotEndsLike(string $value) { return $this->andStringNotEndsLike('status', $value); } public function andStatusIn(array $values) { return $this->andStringIn('status', $values); } public function andStatusNotIn(array $values) { return $this->andStringNotIn('status', $values); } public function andStatusIsDraft() { return $this->andStringEqual('status', 'draft'); } public function andStatusIsNotDraft() { return $this->andStringNot('status', 'draft'); } public function andStatusIsPublished() { return $this->andStringEqual('status', 'published'); } public function andStatusIsNotPublished() { return $this->andStringNot('status', 'published'); } public function andStatusIsScheduled() { return $this->andStringEqual('status', 'scheduled'); } public function andStatusIsNotScheduled() { return $this->andStringNot('status', 'scheduled'); } public function orStatusEqual(string $value) { return $this->orStringEqual('status', $value); } public function orStatusNot(string $value) { return $this->orStringNot('status', $value); } public function orStatusLike(string $value) { return $this->orStringLike('status', $value); } public function orStatusNotLike(string $value) { return $this->orStringNotLike('status', $value); } public function orStatusBeginsLike(string $value) { return $this->orStringBeginsLike('status', $value); } public function orStatusNotBeginsLike(string $value) { return $this->orStringNotBeginsLike('status', $value); } public function orStatusEndsLike(string $value) { return $this->orStringEndsLike('status', $value); } public function orStatusNotEndsLike(string $value) { return $this->orStringNotEndsLike('status', $value); } public function orStatusIn(array $values) { return $this->orStringIn('status', $values); } public function orStatusNotIn(array $values) { return $this->orStringNotIn('status', $values); } public function orStatusIsDraft() { return $this->orStringEqual('status', 'draft'); } public function orStatusIsNotDraft() { return $this->orStringNot('status', 'draft'); } public function orStatusIsPublished() { return $this->orStringEqual('status', 'published'); } public function orStatusIsNotPublished() { return $this->orStringNot('status', 'published'); } public function orStatusIsScheduled() { return $this->orStringEqual('status', 'scheduled'); } public function orStatusIsNotScheduled() { return $this->orStringNot('status', 'scheduled'); } }