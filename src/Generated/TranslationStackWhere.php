<?php  namespace LaminimCMS\Generated; use Lkt\QueryBuilding\Where; use Lkt\QueryBuilding\DateIntervals\AbstractInterval; class TranslationStackWhere extends Where { const COMPONENT = 'lmm-i18n-stack'; /** @return \LaminimCMS\Generated\TranslationStackWhere */ public static function getEmpty() { /** @var \LaminimCMS\Generated\TranslationStackWhere $r */ $r = parent::getEmpty(); return $r; } public function andIdEqual(int $value) { return $this->andIntegerEqual('id', $value); } public function andIdNot(int $value) { return $this->andIntegerNot('id', $value); } public function andIdGreaterThan(int $value) { return $this->andIntegerGreaterThan('id', $value); } public function andIdGreaterOrEqualThan(int $value) { return $this->andIntegerGreaterOrEqualThan('id', $value); } public function andIdLowerThan(int $value) { return $this->andIntegerLowerThan('id', $value); } public function andIdLowerOrEqualThan(int $value) { return $this->andIntegerLowerOrEqualThan('id', $value); } public function andIdBetween(int $from, int $to) { return $this->andIntegerBetween('id', $from, $to); } public function andIdIn(array $values) { return $this->andIntegerIn('id', $values); } public function andIdNotIn(array $values) { return $this->andIntegerNotIn('id', $values); } public function andIdEqualToField(string $component, string $field ) { return $this->andFieldEqualToField('id', $component, $field); } public function orIdEqual(int $value) { return $this->orIntegerEqual('id', $value); } public function orIdNot(int $value) { return $this->orIntegerNot('id', $value); } public function orIdGreaterThan(int $value) { return $this->orIntegerGreaterThan('id', $value); } public function orIdGreaterOrEqualThan(int $value) { return $this->orIntegerGreaterOrEqualThan('id', $value); } public function orIdLowerThan(int $value) { return $this->orIntegerLowerThan('id', $value); } public function orIdLowerOrEqualThan(int $value) { return $this->orIntegerLowerOrEqualThan('id', $value); } public function orIdBetween(int $from, int $to) { return $this->orIntegerBetween('id', $from, $to); } public function orIdIn(array $values) { return $this->orIntegerIn('id', $values); } public function orIdNotIn(array $values) { return $this->orIntegerNotIn('id', $values); } public function orIdEqualToField(string $component, string $field ) { return $this->orFieldEqualToField('id', $component, $field); } /** @return \LaminimCMS\Generated\TranslationStackWhere */ public static function idEqual(int $value) { return static::integerEqual('id', $value); } /** @return \LaminimCMS\Generated\TranslationStackWhere */ public static function idNot(int $value) { return static::integerNot('id', $value); } /** @return \LaminimCMS\Generated\TranslationStackWhere */ public static function idGreaterThan(int $value) { return static::integerGreaterThan('id', $value); } /** @return \LaminimCMS\Generated\TranslationStackWhere */ public static function idGreaterOrEqualThan(int $value) { return static::integerGreaterOrEqualThan('id', $value); } /** @return \LaminimCMS\Generated\TranslationStackWhere */ public static function idLowerThan(int $value) { return static::integerLowerThan('id', $value); } /** @return \LaminimCMS\Generated\TranslationStackWhere */ public static function idLowerOrEqualThan(int $value) { return static::integerLowerOrEqualThan('id', $value); } /** @return \LaminimCMS\Generated\TranslationStackWhere */ public static function idBetween(int $from, int $to) { return static::integerBetween('id', $from, $to); } /** @return \LaminimCMS\Generated\TranslationStackWhere */ public static function idIn(array $values) { return static::integerIn('id', $values); } /** @return \LaminimCMS\Generated\TranslationStackWhere */ public static function idNotIn(array $values) { return static::integerNotIn('id', $values); } public function andNameEqual(string $value) { return $this->andStringEqual('name', $value); } public function andNameNot(string $value) { return $this->andStringNot('name', $value); } public function andNameLike(string $value) { return $this->andStringLike('name', $value); } public function andNameNotLike(string $value) { return $this->andStringNotLike('name', $value); } public function andNameBeginsLike(string $value) { return $this->andStringBeginsLike('name', $value); } public function andNameNotBeginsLike(string $value) { return $this->andStringNotBeginsLike('name', $value); } public function andNameEndsLike(string $value) { return $this->andStringEndsLike('name', $value); } public function andNameNotEndsLike(string $value) { return $this->andStringNotEndsLike('name', $value); } public function andNameIn(array $values) { return $this->andStringIn('name', $values); } public function andNameNotIn(array $values) { return $this->andStringNotIn('name', $values); } public function orNameEqual(string $value) { return $this->orStringEqual('name', $value); } public function orNameNot(string $value) { return $this->orStringNot('name', $value); } public function orNameLike(string $value) { return $this->orStringLike('name', $value); } public function orNameNotLike(string $value) { return $this->orStringNotLike('name', $value); } public function orNameBeginsLike(string $value) { return $this->orStringBeginsLike('name', $value); } public function orNameNotBeginsLike(string $value) { return $this->orStringNotBeginsLike('name', $value); } public function orNameEndsLike(string $value) { return $this->orStringEndsLike('name', $value); } public function orNameNotEndsLike(string $value) { return $this->orStringNotEndsLike('name', $value); } public function orNameIn(array $values) { return $this->orStringIn('name', $values); } public function orNameNotIn(array $values) { return $this->orStringNotIn('name', $values); } /** @return \LaminimCMS\Generated\TranslationStackWhere */ public static function nameEqual(string $value) { return static::stringEqual('name', $value); } /** @return \LaminimCMS\Generated\TranslationStackWhere */ public static function nameNot(string $value) { return static::stringNot('name', $value); } /** @return \LaminimCMS\Generated\TranslationStackWhere */ public static function nameLike(string $value) { return static::stringLike('name', $value); } /** @return \LaminimCMS\Generated\TranslationStackWhere */ public static function nameNotLike(string $value) { return static::stringNotLike('name', $value); } /** @return \LaminimCMS\Generated\TranslationStackWhere */ public static function nameBeginsLike(string $value) { return static::stringBeginsLike('name', $value); } /** @return \LaminimCMS\Generated\TranslationStackWhere */ public static function nameNotBeginsLike(string $value) { return static::stringNotBeginsLike('name', $value); } /** @return \LaminimCMS\Generated\TranslationStackWhere */ public static function nameEndsLike(string $value) { return static::stringEndsLike('name', $value); } /** @return \LaminimCMS\Generated\TranslationStackWhere */ public static function nameNotEndsLike(string $value) { return static::stringNotEndsLike('name', $value); } /** @return \LaminimCMS\Generated\TranslationStackWhere */ public static function nameIn(array $values) { return static::stringIn('name', $values); } /** @return \LaminimCMS\Generated\TranslationStackWhere */ public static function nameNotIn(array $values) { return static::stringNotIn('name', $values); } public function andPropertyEqual(string $value) { return $this->andStringEqual('property', $value); } public function andPropertyNot(string $value) { return $this->andStringNot('property', $value); } public function andPropertyLike(string $value) { return $this->andStringLike('property', $value); } public function andPropertyNotLike(string $value) { return $this->andStringNotLike('property', $value); } public function andPropertyBeginsLike(string $value) { return $this->andStringBeginsLike('property', $value); } public function andPropertyNotBeginsLike(string $value) { return $this->andStringNotBeginsLike('property', $value); } public function andPropertyEndsLike(string $value) { return $this->andStringEndsLike('property', $value); } public function andPropertyNotEndsLike(string $value) { return $this->andStringNotEndsLike('property', $value); } public function andPropertyIn(array $values) { return $this->andStringIn('property', $values); } public function andPropertyNotIn(array $values) { return $this->andStringNotIn('property', $values); } public function orPropertyEqual(string $value) { return $this->orStringEqual('property', $value); } public function orPropertyNot(string $value) { return $this->orStringNot('property', $value); } public function orPropertyLike(string $value) { return $this->orStringLike('property', $value); } public function orPropertyNotLike(string $value) { return $this->orStringNotLike('property', $value); } public function orPropertyBeginsLike(string $value) { return $this->orStringBeginsLike('property', $value); } public function orPropertyNotBeginsLike(string $value) { return $this->orStringNotBeginsLike('property', $value); } public function orPropertyEndsLike(string $value) { return $this->orStringEndsLike('property', $value); } public function orPropertyNotEndsLike(string $value) { return $this->orStringNotEndsLike('property', $value); } public function orPropertyIn(array $values) { return $this->orStringIn('property', $values); } public function orPropertyNotIn(array $values) { return $this->orStringNotIn('property', $values); } /** @return \LaminimCMS\Generated\TranslationStackWhere */ public static function propertyEqual(string $value) { return static::stringEqual('property', $value); } /** @return \LaminimCMS\Generated\TranslationStackWhere */ public static function propertyNot(string $value) { return static::stringNot('property', $value); } /** @return \LaminimCMS\Generated\TranslationStackWhere */ public static function propertyLike(string $value) { return static::stringLike('property', $value); } /** @return \LaminimCMS\Generated\TranslationStackWhere */ public static function propertyNotLike(string $value) { return static::stringNotLike('property', $value); } /** @return \LaminimCMS\Generated\TranslationStackWhere */ public static function propertyBeginsLike(string $value) { return static::stringBeginsLike('property', $value); } /** @return \LaminimCMS\Generated\TranslationStackWhere */ public static function propertyNotBeginsLike(string $value) { return static::stringNotBeginsLike('property', $value); } /** @return \LaminimCMS\Generated\TranslationStackWhere */ public static function propertyEndsLike(string $value) { return static::stringEndsLike('property', $value); } /** @return \LaminimCMS\Generated\TranslationStackWhere */ public static function propertyNotEndsLike(string $value) { return static::stringNotEndsLike('property', $value); } /** @return \LaminimCMS\Generated\TranslationStackWhere */ public static function propertyIn(array $values) { return static::stringIn('property', $values); } /** @return \LaminimCMS\Generated\TranslationStackWhere */ public static function propertyNotIn(array $values) { return static::stringNotIn('property', $values); } public function andRequiredAdminPermsIsTrue() { return $this->andBooleanTrue('required_admin_perms'); } public function andRequiredAdminPermsIsFalse() { return $this->andBooleanFalse('required_admin_perms'); } public function orRequiredAdminPermsIsTrue() { return $this->orBooleanTrue('required_admin_perms'); } public function orRequiredAdminPermsIsFalse() { return $this->orBooleanFalse('required_admin_perms'); } /** @return \LaminimCMS\Generated\TranslationStackWhere */ public static function requiredAdminPermsIsTrue() { return static::booleanTrue('required_admin_perms'); } /** @return \LaminimCMS\Generated\TranslationStackWhere */ public static function requiredAdminPermsIsFalse() { return static::booleanFalse('required_admin_perms'); } public function andOnlyForCmsIsTrue() { return $this->andBooleanTrue('only_for_cms'); } public function andOnlyForCmsIsFalse() { return $this->andBooleanFalse('only_for_cms'); } public function orOnlyForCmsIsTrue() { return $this->orBooleanTrue('only_for_cms'); } public function orOnlyForCmsIsFalse() { return $this->orBooleanFalse('only_for_cms'); } /** @return \LaminimCMS\Generated\TranslationStackWhere */ public static function onlyForCmsIsTrue() { return static::booleanTrue('only_for_cms'); } /** @return \LaminimCMS\Generated\TranslationStackWhere */ public static function onlyForCmsIsFalse() { return static::booleanFalse('only_for_cms'); } }