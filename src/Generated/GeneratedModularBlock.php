<?php  namespace LaminimCMS\Generated; use Lkt\QueryBuilding\Where; use Lkt\QueryBuilding\Query; use Lkt\Factory\Instantiator\Instantiator; class GeneratedModularBlock extends \Lkt\Factory\Instantiator\Instances\AbstractInstance { const GENERATED_TYPE = 'lmm-modular-block'; const COMPONENT = 'lmm-modular-block'; public function getId() :int { return $this->_getIntegerVal('id'); } public function hasId() :bool { return $this->_hasIntegerVal('id'); } /** @return \LaminimCMS\Instances\ModularBlock */ public function setId(int $id) { $this->_setIntegerVal('id', $id); return $this; } public function getName() :string { return $this->_getStringVal('name'); } public function hasName() :bool { return $this->_hasStringVal('name'); } /** @return \LaminimCMS\Instances\ModularBlock */ public function setName(string $name) { $this->_setStringVal('name', $name); return $this; } public function getType() :string { return $this->_getStringVal('type'); } public function hasType() :bool { return $this->_hasStringVal('type'); } /** @return \LaminimCMS\Instances\ModularBlock */ public function setType(string $type) { $this->_setStringVal('type', $type); return $this; } public function getItemId() :string { return $this->_getStringVal('itemId'); } public function hasItemId() :bool { return $this->_hasStringVal('itemId'); } /** @return \LaminimCMS\Instances\ModularBlock */ public function setItemId(string $itemId) { $this->_setStringVal('itemId', $itemId); return $this; } public function getCreatedAt(): ?\Carbon\Carbon { return $this->_getDateTimeVal('createdAt'); } public function getCreatedAtFormatted(string $format = null) :string { return $this->_getDateTimeFormattedVal('createdAt', $format); } public function getCreatedAtIntlFormatted(string $format = null) :string { return $this->_getDateTimeFormattedIntlVal('createdAt', $format); } public function hasCreatedAt() :bool { return $this->_hasDateTimeVal('createdAt'); } /** @return \LaminimCMS\Instances\ModularBlock*/ public function setCreatedAt($createdAt) { $this->_setDateTimeVal('createdAt', $createdAt); return $this; } public function getBreakpoints() :?array { return $this->_getJsonVal('breakpoints'); } /** @return \LaminimCMS\Instances\ModularBlock*/ public function setBreakpoints(array $breakpoints) { $this->_setJsonVal('breakpoints', $breakpoints); return $this; } public function hasBreakpoints() :bool { return $this->_hasJsonVal('breakpoints'); } public function getModularContent(): string { return $this->_getForeignListVal('modularContent'); } public function hasModularContent() :bool { return $this->_hasForeignListVal('modularContent'); } /** @return \LaminimCMS\Instances\ModularBlock*/ public function setModularContent($modularContent) { $this->_setForeignListVal('modularContent', $modularContent); return $this; } /** @return \LaminimCMS\Instances\ModularBlock*/ public function removeModularContentIds(array $ids) { $this->_removeForeignListIds('modularContent', $ids); return $this; } /** @return \LaminimCMS\Instances\ModularContent[]*/ public function getModularContentData() :array { return $this->_getForeignListData('modularContent'); } public function getModularContentIds() :array { return $this->_getForeignListIds('modularContent'); } /** * @return \LaminimCMS\Instances\ModularBlock[] */ public static function getMany(Query $builder = null): array { /** @var \LaminimCMS\Instances\ModularBlock[] */ $r = parent::getMany($builder); return $r; } /** * @return \LaminimCMS\Instances\ModularBlock|null */ public static function getOne(Query $builder = null) { /** @var \LaminimCMS\Instances\ModularBlock */ $r = parent::getOne($builder); return $r; } /** @return \LaminimCMS\Generated\ModularBlockQueryBuilder */ public static function getQueryCaller() { /** * @var \LaminimCMS\Generated\ModularBlockQueryBuilder $builder */ list($builder) = Instantiator::getCustomQueryCaller(static::GENERATED_TYPE); return $builder; } /** @return \LaminimCMS\Generated\ModularBlockQueryBuilder */ public static function getFilteredQueryCaller(array $data, array $processRules = null, array $filterRules = null) { /** * @var \LaminimCMS\Generated\ModularBlockQueryBuilder $caller */ list($builder) = Instantiator::getCustomQueryCaller(static::GENERATED_TYPE, $data, $processRules, $filterRules); return $builder; } /** * @return \LaminimCMS\Instances\ModularBlock[] */ public static function getPage(int $page, Query $builder = null): array { /** @var \LaminimCMS\Instances\ModularBlock[] */ $r = parent::getPage($page, $builder); return $r; } }