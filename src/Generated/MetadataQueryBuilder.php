<?php  namespace LaminimCMS\Generated; use Lkt\QueryBuilding\Query; use Lkt\QueryBuilding\DateIntervals\AbstractInterval; use Lkt\Factory\Instantiator\Instantiator; use Lkt\Factory\Schemas\Schema; class MetadataQueryBuilder extends Query { const COMPONENT = 'lmm-metadata'; /** @return \LaminimCMS\Generated\MetadataQueryBuilder */ public static function getCaller() { $schema = Schema::get(static::COMPONENT); /** @var \LaminimCMS\Generated\MetadataQueryBuilder $r */ $r = static::table($schema->getTable()); Instantiator::prepareQueryCaller(static::COMPONENT, $r); return $r; } public function andIdEqual(int $value) { return $this->andIntegerEqual('id', $value); } public function andIdNot(int $value) { return $this->andIntegerNot('id', $value); } public function andIdGreaterThan(int $value) { return $this->andIntegerGreaterThan('id', $value); } public function andIdGreaterOrEqualThan(int $value) { return $this->andIntegerGreaterOrEqualThan('id', $value); } public function andIdLowerThan(int $value) { return $this->andIntegerLowerThan('id', $value); } public function andIdLowerOrEqualThan(int $value) { return $this->andIntegerLowerOrEqualThan('id', $value); } public function andIdBetween(int $from, int $to) { return $this->andIntegerBetween('id', $from, $to); } public function andIdIn(array $values) { return $this->andIntegerIn('id', $values); } public function andIdNotIn(array $values) { return $this->andIntegerNotIn('id', $values); } public function andIdEqualToField(string $component, string $field ) { return $this->andFieldEqualToField('id', $component, $field); } public function orIdEqual(int $value) { return $this->orIntegerEqual('id', $value); } public function orIdNot(int $value) { return $this->orIntegerNot('id', $value); } public function orIdGreaterThan(int $value) { return $this->orIntegerGreaterThan('id', $value); } public function orIdGreaterOrEqualThan(int $value) { return $this->orIntegerGreaterOrEqualThan('id', $value); } public function orIdLowerThan(int $value) { return $this->orIntegerLowerThan('id', $value); } public function orIdLowerOrEqualThan(int $value) { return $this->orIntegerLowerOrEqualThan('id', $value); } public function orIdBetween(int $from, int $to) { return $this->orIntegerBetween('id', $from, $to); } public function orIdIn(array $values) { return $this->orIntegerIn('id', $values); } public function orIdNotIn(array $values) { return $this->orIntegerNotIn('id', $values); } public function orIdEqualToField(string $component, string $field ) { return $this->orFieldEqualToField('id', $component, $field); } public function andCreatedAtBetween(string $from, string $to) { return $this->andDatetimeBetween('created_at', $from, $to); } public function andCreatedAtEqual(string $value) { return $this->andDatetimeEqual('created_at', $value); } public function andCreatedAtNot(string $value) { return $this->andDatetimeNot('created_at', $value); } public function andCreatedAtGreaterOrEqualThan(string $value, AbstractInterval $interval = null) { return $this->andDatetimeGreaterOrEqualThan('created_at', $value, $interval); } public function andCreatedAtGreaterOrEqualThanNow(AbstractInterval $interval = null) { return $this->andDatetimeGreaterOrEqualThanNow('created_at', $interval); } public function andCreatedAtGreaterThan(string $value, AbstractInterval $interval = null) { return $this->andDatetimeGreaterThan('created_at', $value, $interval); } public function andCreatedAtGreaterThanNow(AbstractInterval $interval = null) { return $this->andDatetimeGreaterThanNow('created_at', $interval); } public function andCreatedAtLowerOrEqualThan(string $value, AbstractInterval $interval = null) { return $this->andDatetimeLowerOrEqualThan('created_at', $value, $interval); } public function andCreatedAtLowerOrEqualThanNow(AbstractInterval $interval = null) { return $this->andDatetimeLowerOrEqualThanNow('created_at', $interval); } public function andCreatedAtLowerThan(string $value, AbstractInterval $interval = null) { return $this->andDatetimeLowerThan('created_at', $value, $interval); } public function andCreatedAtLowerThanNow(AbstractInterval $interval = null) { return $this->andDatetimeLowerThanNow('created_at', $interval); } public function andCreatedAtLike(string $value) { return $this->andDatetimeLike('created_at', $value); } public function andCreatedAtNotLike(string $value) { return $this->andDatetimeNotLike('created_at', $value); } public function andCreatedAtBeginsLike(string $value) { return $this->andDatetimeBeginsLike('created_at', $value); } public function andCreatedAtNotBeginsLike(string $value) { return $this->andDatetimeNotBeginsLike('created_at', $value); } public function andCreatedAtEndsLike(string $value) { return $this->andDatetimeEndsLike('created_at', $value); } public function andCreatedAtNotEndsLike(string $value) { return $this->andDatetimeNotEndsLike('created_at', $value); } public function orCreatedAtBetween(string $from, string $to) { return $this->orDatetimeBetween('created_at', $from, $to); } public function orCreatedAtEqual(string $value) { return $this->orDatetimeEqual('created_at', $value); } public function orCreatedAtNot(string $value) { return $this->orDatetimeNot('created_at', $value); } public function orCreatedAtGreaterOrEqualThan(string $value, AbstractInterval $interval = null) { return $this->orDatetimeGreaterOrEqualThan('created_at', $value, $interval); } public function orCreatedAtGreaterOrEqualThanNow(AbstractInterval $interval = null) { return $this->orDatetimeGreaterOrEqualThanNow('created_at', $interval); } public function orCreatedAtGreaterThan(string $value, AbstractInterval $interval = null) { return $this->orDatetimeGreaterThan('created_at', $value, $interval); } public function orCreatedAtGreaterThanNow(AbstractInterval $interval = null) { return $this->orDatetimeGreaterThanNow('created_at', $interval); } public function orCreatedAtLowerOrEqualThan(string $value, AbstractInterval $interval = null) { return $this->orDatetimeLowerOrEqualThan('created_at', $value, $interval); } public function orCreatedAtLowerOrEqualThanNow(AbstractInterval $interval = null) { return $this->orDatetimeLowerOrEqualThanNow('created_at', $interval); } public function orCreatedAtLowerThan(string $value, AbstractInterval $interval = null) { return $this->orDatetimeLowerThan('created_at', $value, $interval); } public function orCreatedAtLowerThanNow(AbstractInterval $interval = null) { return $this->orDatetimeLowerThanNow('created_at', $interval); } public function orCreatedAtLike(string $value) { return $this->orDatetimeLike('created_at', $value); } public function orCreatedAtNotLike(string $value) { return $this->orDatetimeNotLike('created_at', $value); } public function orCreatedAtBeginsLike(string $value) { return $this->orDatetimeBeginsLike('created_at', $value); } public function orCreatedAtNotBeginsLike(string $value) { return $this->orDatetimeNotBeginsLike('created_at', $value); } public function orCreatedAtEndsLike(string $value) { return $this->orDatetimeEndsLike('created_at', $value); } public function orCreatedAtNotEndsLike(string $value) { return $this->orDatetimeNotEndsLike('created_at', $value); } public function andCreatedByEqual(int $value) { return $this->andIntegerEqual('created_by', $value); } public function andCreatedByNot(int $value) { return $this->andIntegerNot('created_by', $value); } public function andCreatedByGreaterThan(int $value) { return $this->andIntegerGreaterThan('created_by', $value); } public function andCreatedByGreaterOrEqualThan(int $value) { return $this->andIntegerGreaterOrEqualThan('created_by', $value); } public function andCreatedByLowerThan(int $value) { return $this->andIntegerLowerThan('created_by', $value); } public function andCreatedByLowerOrEqualThan(int $value) { return $this->andIntegerLowerOrEqualThan('created_by', $value); } public function andCreatedByBetween(int $from, int $to) { return $this->andIntegerBetween('created_by', $from, $to); } public function andCreatedByIn(array $values) { return $this->andIntegerIn('created_by', $values); } public function andCreatedByNotIn(array $values) { return $this->andIntegerNotIn('created_by', $values); } public function andCreatedByEqualToField(string $component, string $field ) { return $this->andFieldEqualToField('created_by', $component, $field); } public function orCreatedByEqual(int $value) { return $this->orIntegerEqual('created_by', $value); } public function orCreatedByNot(int $value) { return $this->orIntegerNot('created_by', $value); } public function orCreatedByGreaterThan(int $value) { return $this->orIntegerGreaterThan('created_by', $value); } public function orCreatedByGreaterOrEqualThan(int $value) { return $this->orIntegerGreaterOrEqualThan('created_by', $value); } public function orCreatedByLowerThan(int $value) { return $this->orIntegerLowerThan('created_by', $value); } public function orCreatedByLowerOrEqualThan(int $value) { return $this->orIntegerLowerOrEqualThan('created_by', $value); } public function orCreatedByBetween(int $from, int $to) { return $this->orIntegerBetween('created_by', $from, $to); } public function orCreatedByIn(array $values) { return $this->orIntegerIn('created_by', $values); } public function orCreatedByNotIn(array $values) { return $this->orIntegerNotIn('created_by', $values); } public function orCreatedByEqualToField(string $component, string $field ) { return $this->orFieldEqualToField('created_by', $component, $field); } public function andItemTypeEqual(string $value) { return $this->andStringEqual('item_type', $value); } public function andItemTypeNot(string $value) { return $this->andStringNot('item_type', $value); } public function andItemTypeLike(string $value) { return $this->andStringLike('item_type', $value); } public function andItemTypeNotLike(string $value) { return $this->andStringNotLike('item_type', $value); } public function andItemTypeBeginsLike(string $value) { return $this->andStringBeginsLike('item_type', $value); } public function andItemTypeNotBeginsLike(string $value) { return $this->andStringNotBeginsLike('item_type', $value); } public function andItemTypeEndsLike(string $value) { return $this->andStringEndsLike('item_type', $value); } public function andItemTypeNotEndsLike(string $value) { return $this->andStringNotEndsLike('item_type', $value); } public function andItemTypeIn(array $values) { return $this->andStringIn('item_type', $values); } public function andItemTypeNotIn(array $values) { return $this->andStringNotIn('item_type', $values); } public function orItemTypeEqual(string $value) { return $this->orStringEqual('item_type', $value); } public function orItemTypeNot(string $value) { return $this->orStringNot('item_type', $value); } public function orItemTypeLike(string $value) { return $this->orStringLike('item_type', $value); } public function orItemTypeNotLike(string $value) { return $this->orStringNotLike('item_type', $value); } public function orItemTypeBeginsLike(string $value) { return $this->orStringBeginsLike('item_type', $value); } public function orItemTypeNotBeginsLike(string $value) { return $this->orStringNotBeginsLike('item_type', $value); } public function orItemTypeEndsLike(string $value) { return $this->orStringEndsLike('item_type', $value); } public function orItemTypeNotEndsLike(string $value) { return $this->orStringNotEndsLike('item_type', $value); } public function orItemTypeIn(array $values) { return $this->orStringIn('item_type', $values); } public function orItemTypeNotIn(array $values) { return $this->orStringNotIn('item_type', $values); } public function andItemEqual(int $value) { return $this->andIntegerEqual('item_id', $value); } public function andItemNot(int $value) { return $this->andIntegerNot('item_id', $value); } public function andItemGreaterThan(int $value) { return $this->andIntegerGreaterThan('item_id', $value); } public function andItemGreaterOrEqualThan(int $value) { return $this->andIntegerGreaterOrEqualThan('item_id', $value); } public function andItemLowerThan(int $value) { return $this->andIntegerLowerThan('item_id', $value); } public function andItemLowerOrEqualThan(int $value) { return $this->andIntegerLowerOrEqualThan('item_id', $value); } public function andItemBetween(int $from, int $to) { return $this->andIntegerBetween('item_id', $from, $to); } public function andItemIn(array $values) { return $this->andIntegerIn('item_id', $values); } public function andItemNotIn(array $values) { return $this->andIntegerNotIn('item_id', $values); } public function andItemEqualToField(string $component, string $field ) { return $this->andFieldEqualToField('item_id', $component, $field); } public function orItemEqual(int $value) { return $this->orIntegerEqual('item_id', $value); } public function orItemNot(int $value) { return $this->orIntegerNot('item_id', $value); } public function orItemGreaterThan(int $value) { return $this->orIntegerGreaterThan('item_id', $value); } public function orItemGreaterOrEqualThan(int $value) { return $this->orIntegerGreaterOrEqualThan('item_id', $value); } public function orItemLowerThan(int $value) { return $this->orIntegerLowerThan('item_id', $value); } public function orItemLowerOrEqualThan(int $value) { return $this->orIntegerLowerOrEqualThan('item_id', $value); } public function orItemBetween(int $from, int $to) { return $this->orIntegerBetween('item_id', $from, $to); } public function orItemIn(array $values) { return $this->orIntegerIn('item_id', $values); } public function orItemNotIn(array $values) { return $this->orIntegerNotIn('item_id', $values); } public function orItemEqualToField(string $component, string $field ) { return $this->orFieldEqualToField('item_id', $component, $field); } public function andTitleEqual(string $value) { return $this->andStringEqual('title', $value); } public function andTitleNot(string $value) { return $this->andStringNot('title', $value); } public function andTitleLike(string $value) { return $this->andStringLike('title', $value); } public function andTitleNotLike(string $value) { return $this->andStringNotLike('title', $value); } public function andTitleBeginsLike(string $value) { return $this->andStringBeginsLike('title', $value); } public function andTitleNotBeginsLike(string $value) { return $this->andStringNotBeginsLike('title', $value); } public function andTitleEndsLike(string $value) { return $this->andStringEndsLike('title', $value); } public function andTitleNotEndsLike(string $value) { return $this->andStringNotEndsLike('title', $value); } public function andTitleIn(array $values) { return $this->andStringIn('title', $values); } public function andTitleNotIn(array $values) { return $this->andStringNotIn('title', $values); } public function orTitleEqual(string $value) { return $this->orStringEqual('title', $value); } public function orTitleNot(string $value) { return $this->orStringNot('title', $value); } public function orTitleLike(string $value) { return $this->orStringLike('title', $value); } public function orTitleNotLike(string $value) { return $this->orStringNotLike('title', $value); } public function orTitleBeginsLike(string $value) { return $this->orStringBeginsLike('title', $value); } public function orTitleNotBeginsLike(string $value) { return $this->orStringNotBeginsLike('title', $value); } public function orTitleEndsLike(string $value) { return $this->orStringEndsLike('title', $value); } public function orTitleNotEndsLike(string $value) { return $this->orStringNotEndsLike('title', $value); } public function orTitleIn(array $values) { return $this->orStringIn('title', $values); } public function orTitleNotIn(array $values) { return $this->orStringNotIn('title', $values); } public function andDescriptionEqual(string $value) { return $this->andStringEqual('description', $value); } public function andDescriptionNot(string $value) { return $this->andStringNot('description', $value); } public function andDescriptionLike(string $value) { return $this->andStringLike('description', $value); } public function andDescriptionNotLike(string $value) { return $this->andStringNotLike('description', $value); } public function andDescriptionBeginsLike(string $value) { return $this->andStringBeginsLike('description', $value); } public function andDescriptionNotBeginsLike(string $value) { return $this->andStringNotBeginsLike('description', $value); } public function andDescriptionEndsLike(string $value) { return $this->andStringEndsLike('description', $value); } public function andDescriptionNotEndsLike(string $value) { return $this->andStringNotEndsLike('description', $value); } public function andDescriptionIn(array $values) { return $this->andStringIn('description', $values); } public function andDescriptionNotIn(array $values) { return $this->andStringNotIn('description', $values); } public function orDescriptionEqual(string $value) { return $this->orStringEqual('description', $value); } public function orDescriptionNot(string $value) { return $this->orStringNot('description', $value); } public function orDescriptionLike(string $value) { return $this->orStringLike('description', $value); } public function orDescriptionNotLike(string $value) { return $this->orStringNotLike('description', $value); } public function orDescriptionBeginsLike(string $value) { return $this->orStringBeginsLike('description', $value); } public function orDescriptionNotBeginsLike(string $value) { return $this->orStringNotBeginsLike('description', $value); } public function orDescriptionEndsLike(string $value) { return $this->orStringEndsLike('description', $value); } public function orDescriptionNotEndsLike(string $value) { return $this->orStringNotEndsLike('description', $value); } public function orDescriptionIn(array $values) { return $this->orStringIn('description', $values); } public function orDescriptionNotIn(array $values) { return $this->orStringNotIn('description', $values); } public function andKeywordsEqual(string $value) { return $this->andStringEqual('keywords', $value); } public function andKeywordsNot(string $value) { return $this->andStringNot('keywords', $value); } public function andKeywordsLike(string $value) { return $this->andStringLike('keywords', $value); } public function andKeywordsNotLike(string $value) { return $this->andStringNotLike('keywords', $value); } public function andKeywordsBeginsLike(string $value) { return $this->andStringBeginsLike('keywords', $value); } public function andKeywordsNotBeginsLike(string $value) { return $this->andStringNotBeginsLike('keywords', $value); } public function andKeywordsEndsLike(string $value) { return $this->andStringEndsLike('keywords', $value); } public function andKeywordsNotEndsLike(string $value) { return $this->andStringNotEndsLike('keywords', $value); } public function andKeywordsIn(array $values) { return $this->andStringIn('keywords', $values); } public function andKeywordsNotIn(array $values) { return $this->andStringNotIn('keywords', $values); } public function orKeywordsEqual(string $value) { return $this->orStringEqual('keywords', $value); } public function orKeywordsNot(string $value) { return $this->orStringNot('keywords', $value); } public function orKeywordsLike(string $value) { return $this->orStringLike('keywords', $value); } public function orKeywordsNotLike(string $value) { return $this->orStringNotLike('keywords', $value); } public function orKeywordsBeginsLike(string $value) { return $this->orStringBeginsLike('keywords', $value); } public function orKeywordsNotBeginsLike(string $value) { return $this->orStringNotBeginsLike('keywords', $value); } public function orKeywordsEndsLike(string $value) { return $this->orStringEndsLike('keywords', $value); } public function orKeywordsNotEndsLike(string $value) { return $this->orStringNotEndsLike('keywords', $value); } public function orKeywordsIn(array $values) { return $this->orStringIn('keywords', $values); } public function orKeywordsNotIn(array $values) { return $this->orStringNotIn('keywords', $values); } public function andUrlEqual(string $value) { return $this->andStringEqual('url', $value); } public function andUrlNot(string $value) { return $this->andStringNot('url', $value); } public function andUrlLike(string $value) { return $this->andStringLike('url', $value); } public function andUrlNotLike(string $value) { return $this->andStringNotLike('url', $value); } public function andUrlBeginsLike(string $value) { return $this->andStringBeginsLike('url', $value); } public function andUrlNotBeginsLike(string $value) { return $this->andStringNotBeginsLike('url', $value); } public function andUrlEndsLike(string $value) { return $this->andStringEndsLike('url', $value); } public function andUrlNotEndsLike(string $value) { return $this->andStringNotEndsLike('url', $value); } public function andUrlIn(array $values) { return $this->andStringIn('url', $values); } public function andUrlNotIn(array $values) { return $this->andStringNotIn('url', $values); } public function orUrlEqual(string $value) { return $this->orStringEqual('url', $value); } public function orUrlNot(string $value) { return $this->orStringNot('url', $value); } public function orUrlLike(string $value) { return $this->orStringLike('url', $value); } public function orUrlNotLike(string $value) { return $this->orStringNotLike('url', $value); } public function orUrlBeginsLike(string $value) { return $this->orStringBeginsLike('url', $value); } public function orUrlNotBeginsLike(string $value) { return $this->orStringNotBeginsLike('url', $value); } public function orUrlEndsLike(string $value) { return $this->orStringEndsLike('url', $value); } public function orUrlNotEndsLike(string $value) { return $this->orStringNotEndsLike('url', $value); } public function orUrlIn(array $values) { return $this->orStringIn('url', $values); } public function orUrlNotIn(array $values) { return $this->orStringNotIn('url', $values); } }